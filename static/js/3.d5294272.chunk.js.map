{"version":3,"sources":["logic/contexts/ChannelContext.js","logic/custom-hooks/useOnChannelEnter.js","logic/custom-hooks/useOnRoomEnter.js","components/ChannelNav/RoomLink.js","components/OnlineUsers/UserDisplay.js","assets/svg/reply-fill.svg","components/Chat/MsgButtons.js","components/Chat/MentionWrapper.js","assets/svg/attach_file_black_24dp.svg","components/Upload/AttachmentWrapper.js","components/Chat/ReplyContext.js","logic/date.js","components/Chat/MsgHeader.js","components/Chat/ChatMsg.js","components/Chat/ChatDisplay.js","components/Chat/ReplyBar.js","components/Chat/MentionsPopup.js","components/Chat/ChatBarInput.js","components/Chat/ChatBar.js","components/Upload/UploadProgressWrapper.js","components/Chat/ChatBarWrapper.js","components/Chat/ChatWrapper.js","assets/svg/menu-fill.svg","assets/svg/user-3-fill.svg","components/TopBar.js","components/OnlineUsers/OnlineUsers.js","logic/custom-hooks/useUserCountStrs.js","components/Settings/RoomSettings/RoomOverview.js","components/Settings/RoomSettings/RoomSettings.js"],"names":["ChannelContext","createContext","useOnChannelEnter","user","channelID","channelList","updateChannel","setError","useState","visitingChannel","setVisitingChannel","roleList","setRoleList","roomCategories","setRoomCategories","roomList","setRoomList","userList","setUserList","onlineUsers","setOnlineUsers","userRole","setUserRole","isVisiting","useMemo","every","c","id","history","useHistory","location","useLocation","useEffect","getInfoForVisitingChannel","data","channelInfo","name","icon","defaultRoom","message","getChannelInfo","detachListenersForChannel","uid","find","u","role","pathname","defaultRoomID","Object","keys","push","replace","useOnRoomEnter","roomID","setRoomName","finishLoading","msgList","setMsgList","onRoomEnter","detachListenersForRoom","dealWithReadMentions","getRoomStuff","submitMsg","msg","replyTo","mentions","attachments","msgObj","timestamp","getUnixTime","Date","pushToMsgList","msgID","length","forEach","mention","updateMentions","RoomLink","channel","room","mentionCount","isAdmin","editRoom","toolTipInfo","setToolTipInfo","actionsRef","useRef","className","to","activeClassName","svg","settingsSVG","elRef","el","current","settings","onMouseEnter","text","onMouseLeave","onClick","count","posInfo","getBoundingClientRect","direction","UserDisplay","selectMention","isFocused","theme","searchValue","parentProps","avatar","color","status","displayName","img","userStatus","MsgButtons","setReplyTo","IconBtn","replyIcon","alt","MentionWrapper","props","style","display","children","AttachmentWrapper","url","cancel","src","paperclipSVG","href","closeSVG","ReplyContext","Avatar","convertTimestampToString","dateObj","fromUnixTime","isToday","format","isYesterday","MsgHeader","ChatMsg","content","onReplyTo","senderID","msgId","replyContext","isShowBtns","setIsShowBtns","currentUser","useContext","UserContext","isMentioned","some","m","sender","uObj","replyUser","convertPlaintextToHTML","useCallback","mentionRanges","mentionOffsets","range","offset","i","split","val","mentionIndex","indexOf","includes","concat","onMouseOver","map","a","idx","ChatDisplay","messagesEndRef","scrollerRef","isScrolled","setIsScrolled","firstRender","setFirstRender","scrollIntoView","behavior","block","inline","alignToTop","scrollToBottom","ref","opacity","onLoad","notifyWhenScrollingIsFinished","onScroll","obj","Promise","resolve","requestAnimationFrame","check","scrollHeight","offsetHeight","scrollTop","sameFrame","ReplyBar","close","closeBtn","MentionsPopup","ChatBarInput","chatBarInputRef","roomName","isAttachments","getAttachmentsURL","cleanUpAttachments","submit","EditorState","createEmpty","editorState","setEditorState","isMentionPopup","setIsMentionPopup","suggestions","setSuggestions","ErrorContext","mentionPlugin","createMentionPlugin","mentionComponent","plugins","MentionSuggestions","editorKey","onChange","keyBindingFn","e","key","handleKeyCommand","cmd","onMsgSubmit","fillMentionArr","raw","entityMap","mentionArr","blocks","entityRanges","replyToMsgID","convertToRaw","getCurrentContent","attachmentsURL","newEditorState","ContentState","createFromText","currentState","getSelection","newEditorWithCurrentState","forceSelection","placeholder","open","onOpenChange","isOpen","entryComponent","popoverContainer","onSearchChange","query","value","sort","b","filter","renderEmptyPopup","ChatBar","handleNewAttachments","removeAttachment","borderTopLeftRadius","borderTopRightRadius","UploadFile","handleFile","actionOnChange","addCircleSvg","f","UploadProgressWrapper","task","progress","ChatBarWrapper","setAttachments","uploadTasks","setUploadTasks","uploadTasksCtnRef","useLayoutEffect","top","onSubmit","submitHandler","t","file","prev","copy","all","beginUpload","uniqid","listenToUploadProgress","getDownloadURL","snapshot","fileURL","preventDefault","ChatWrapper","isVisitor","useParams","subscribeToChannel","focus","FlatBtn","TopBar","isMobile","showUserList","showNav","menuSVG","userSVG","OnlineUsers","list","roles","rolesRef","userCountStrs","setUserCountStrs","userCount","classList","add","remove","useUserCountStrs","CatList","catRef","cat","headerSubtext","RoomOverview","useInputValues","room_name","room_category","category","inputValues","setInputValues","handleChange","isMounted","useSuccess","success","setSuccess","isSaving","setIsSaving","Success","room_Name","roomCategory","room_Category","updateRoomName","createRoomCategory","updateCategoryOfRoom","InputField","label","type","loading","RoomSettings","SetError","useMobileCheck","isMobileCheck","useReducer","state","action","payload","deleteRoom","Error","dispatch","Import","mobile","desktop","Settings","categories","btnList","createSettingsButtonDetails","overview","isDefault"],"mappings":"sHAAA,6CAEaA,EAAiBC,wBAAc,O,oHCM7B,SAASC,EACtBC,EACAC,EACAC,EACAC,EACAC,GAEA,MAA8CC,qBAA9C,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgCF,mBAAS,CAAC,WAA1C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4CJ,mBAAS,CAAC,SAAtD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAsCV,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAgCZ,qBAAhC,mBAAOa,EAAP,KAAiBC,EAAjB,KAEMC,EAAaC,mBACjB,yBAAMnB,QAAN,IAAMA,OAAN,EAAMA,EAAaoB,OAAM,SAACC,GAAD,OAAOA,EAAEC,KAAOvB,OACzC,CAACC,EAAaD,IAEVwB,EAAUC,cACVC,EAAWC,cA8FjB,OA5FAC,qBACE,WACO7B,GAASE,GACd,gCAAC,mGACMD,GAAcmB,EADpB,yCACuCb,KADvC,WAEKD,EAFL,0EAIsBwB,YAA0B7B,GAJhD,OAIS8B,EAJT,OAKSC,EAAc,CAClBC,KAAMF,EAAK,GACXG,KAAMH,EAAK,GACXI,YAAaJ,EAAK,IAEpBxB,EAAmByB,GAVtB,kDAYG5B,EAAS,KAAMgC,SAZlB,yDAAD,KAgBF,CACEpC,EACAC,EACAC,EACAI,EACAc,EACAhB,IAGJyB,qBAAU,WACR,GAAK5B,GAAcD,EAiBnB,OAhBA,gCAAC,iHAESqC,YACJpC,EACAE,EACAQ,EACAE,EACAJ,EACAM,EACAE,GATL,sDAYGb,EAAS,KAAMgC,SAZlB,uDAAD,GAgBO,WACLE,YAA0BrC,EAAWD,EAAKuC,QAE3C,CAACtC,EAAWmB,EAAYjB,EAAeH,EAAMI,IAEhDyB,qBAAU,WAAO,IAAD,EACT7B,GAASc,GACdK,EAAW,UAACL,EAAS0B,MAAK,SAACC,GAAD,OAAOA,EAAEF,MAAQvC,EAAKuC,cAArC,aAAC,EAA0CG,QACrD,CAAC1C,EAAMc,IAEVe,qBACE,WACE,GAAK7B,GAASE,IAEZyB,EAASgB,WAAT,oBAAmC1C,IACnC0B,EAASgB,WAAT,oBAAmC1C,EAAnC,MAGA,GAAImB,EAAY,CACd,IAAKd,EAAiB,OACtB,IAAMsC,EAAgBC,OAAOC,KAC3BxC,EAAgB6B,aAChB,GACFV,EAAQsB,KAAR,oBAA0B9C,EAA1B,YAAuC2C,QAClC,CACL,IAAMA,EACJ1C,GACA2C,OAAOC,KAAP,OACE5C,QADF,IACEA,OADF,EACEA,EAAasC,MAAK,SAACjB,GAAD,OAAOA,EAAEC,KAAOvB,KAC/BkC,aACH,GACJV,EAAQuB,QAAR,oBAA6B/C,EAA7B,YAA0C2C,EAA1C,SAIN,CACE5C,EACAC,EACAC,EACAuB,EACAL,EACAd,EACAqB,EAASgB,WAIN,CACLrC,kBACAE,WACAE,iBACAE,WACAE,WACAE,cACAE,c,4HCrHW,SAAS+B,EACtBjD,EACAC,EACAiD,EACAC,EACAC,EACAhD,GAEA,MAA8BC,mBAAS,IAAvC,mBAAOgD,EAAP,KAAgBC,EAAhB,KA6BA,OA3BAzB,qBAAU,WACR,GAAK7B,GAASC,GAAciD,EAgB5B,OAjBc,mCAEdK,GAeA,gCAAO,wGAEHC,YAAuBN,GAFpB,SAGGO,YAAqBzD,EAAKuC,IAAKtC,EAAWiD,GAH7C,sDAKH9C,EAAS,KAAMgC,SALZ,wDAjBO,sDAId,iHAEUsB,YACJR,EACAC,EACAG,EACAF,GANN,uBAQUK,YAAqBzD,EAAKuC,IAAKtC,EAAWiD,GARpD,uDAUI9C,EAAS,KAAMgC,SAVnB,0DAJc,yBAyBb,CAACc,EAAQjD,EAAWD,EAAMmD,EAAaC,EAAehD,IAElD,CAAEiD,UAASM,UA9BlB,yGAgCA,WAAyBC,EAAKC,EAASC,EAAUC,GAAjD,0FACQC,EAAS,CACbJ,MACA5D,KAAMA,EAAKuC,IACXsB,QAASA,GAAW,KACpBC,SAAUA,GAAY,KACtBC,YAAaA,GAAe,KAC5BE,UAAWC,YAAY,IAAIC,OAP/B,SASsBC,YAAclB,EAAQc,GAT5C,OASQK,EATR,OAWMP,EAASQ,OAAS,GACpBR,EAASS,QAAT,iDAAiB,WAAOC,GAAP,oGAEPC,YAAeD,EAAQjC,IAAKtC,EAAWiD,EAAQmB,GAFxC,sDAIbjE,EAAS,KAAMgC,SAJF,wDAAjB,uDAZJ,2CAhCA,2B,sGCwCasC,IAhDE,SAAC,GAMX,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,QACAC,EACI,EADJA,SAEA,EAAsC1E,qBAAtC,mBAAO2E,EAAP,KAAoBC,EAApB,KACMC,EAAaC,iBAAO,IAC1B,OACE,qCACE,oBAAIC,UAAU,iBAAd,SACE,eAAC,IAAD,CACEC,GAAE,oBAAeV,EAAQnD,GAAvB,YAA6BoD,EAAKpD,IACpC4D,UAAU,UACVE,gBAAgB,SAHlB,UAKE,+BAAOV,EAAK3C,OACX6C,GACC,qBAAKM,UAAU,UAAf,SACE,cAAC,IAAD,CACEG,IAAKC,IACLC,MAAO,SAACC,GAAD,OAASR,EAAWS,QAAQC,SAAWF,GAC9CG,aAAc,kBACZZ,EAAe,CACba,KAAM,YACNJ,GAAIR,EAAWS,QAAQC,YAG3BG,aAAc,kBAAMd,KACpBe,QAASjB,MAIdF,GAAgB,cAAC,IAAD,CAAgBoB,MAAOpB,SAG3CG,GACC,cAAC,IAAD,CACEc,KAAMd,EAAYc,KAClBI,QAASlB,EAAYU,GAAGS,wBACxBC,UAAU,a,oMCdLC,IAjCK,SAAC,GAWd,IAVLjB,EAUI,EAVJA,UAEApF,GAQI,EATJwB,GASI,EARJxB,MACAgG,EAOI,EAPJA,QAEAxB,GAKI,EANJ8B,cAMI,EALJ9B,SAGA+B,GAEI,EAJJC,MAII,EAHJC,YAGI,EAFJF,WACGG,EACC,iBACAH,IAAWnB,GAAa,iBAG5B,MADApF,EAAOA,GAAQwE,EACPmC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,YAE/B,OACE,6CACE1B,UAAS,uBAAkBA,GAC3BY,QAASA,GACLU,GAHN,cAKE,cAAC,IAAD,CAAQK,IAAKJ,EAAQC,MAAOA,EAAOI,WAAYH,IAC/C,sBAAKzB,UAAU,UAAf,UACE,+BAAO0B,IAEP,sBAAM1B,UAAU,qB,uKChCT,G,OAAA,IAA0B,wC,eCwB1B6B,EAhBI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,OACE,qBAAK9B,UAAU,mBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC+B,EAAA,EAAD,CACE5B,IAAK6B,EACLC,IAAI,eACJrB,QAASkB,W,gDCMNI,EAjBQ,SAAC,GAMjB,IALLR,EAKI,EALJA,YACAvE,EAII,EAJJA,IACAf,EAGI,EAHJA,GACAgD,EAEI,EAFJA,QACG+C,EACC,iBAGJ,OAFAT,EAAcA,IAAW,OAAItC,QAAJ,IAAIA,OAAJ,EAAIA,EAASsC,aACtCvE,EAAMA,IAAG,OAAIiC,QAAJ,IAAIA,OAAJ,EAAIA,EAASjC,KAEpB,uBAAM6C,UAAU,kBAAkB,WAAU7C,EAAK,UAASf,EAA1D,UACGsF,GAAe,qCAAQA,KACxB,sBAAMU,MAAO,CAAEC,QAAS,QAAxB,SAAmCF,EAAMG,e,SCjBhC,MAA0B,mDCkC1BC,G,OAxBW,SAAC,GAA2B,IAAzB1F,EAAwB,EAAxBA,KAAM2F,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACtC,OACE,sBAAKzC,UAAU,qBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAK0C,IAAKC,EAAcV,IAAI,yBAE7BO,EACC,mBAAGxC,UAAU,4BAA4B4C,KAAMJ,EAA/C,SACG3F,IAGH,qBAAKmD,UAAU,eAAf,SAA+BnD,OAGlC4F,GACC,qBAAKzC,UAAU,UAAf,SACE,cAAC+B,EAAA,EAAD,CAAS5B,IAAK0C,IAAUjC,QAAS6B,WCV5BK,EAZM,SAAC,GAAyC,IAAvCpB,EAAsC,EAAtCA,YAAaH,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,MAAOhD,EAAU,EAAVA,IAClD,OACE,sBAAKwB,UAAU,oBAAf,UACE,cAAC+C,EAAA,EAAD,CAAQpB,IAAKJ,EAAQC,MAAOA,IAC5B,sBAAMxB,UAAU,eAAhB,SAAgC0B,IAChC,qBAAK1B,UAAU,uBAAf,SACE,qBAAKA,UAAU,UAAf,SAA0BxB,U,oCCNlC,SAASwE,EAAyBnE,GAChC,IAAMoE,EAAUC,YAAarE,GAE7B,OAAIsE,YAAQF,GACJ,YAAN,OAAmBG,YAAOH,EAAS,aAEjCI,YAAYJ,GACR,gBAAN,OAAuBG,YAAOH,EAAS,aAElCG,YAAOH,EAAS,aCTzB,IAWeK,EAXG,SAAC,GAAgC,IAA9B5B,EAA6B,EAA7BA,YAAa7C,EAAgB,EAAhBA,UAChC,OACE,mCACE,sBAAMmB,UAAU,eAAhB,SAAgC0B,IAChC,sBAAM1B,UAAU,YAAhB,SACGgD,EAAyBnE,SCkInB0E,G,OAzHC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAAS9H,EAA0B,EAA1BA,SAAU+H,EAAgB,EAAhBA,UAE5BC,EAOJF,EAPF5I,KACA4D,EAMEgF,EANFhF,IACAK,EAKE2E,EALF3E,UACA8E,EAIEH,EAJFG,MACAjF,EAGE8E,EAHF9E,SACAC,EAEE6E,EAFF7E,YACSiF,EACPJ,EADF/E,QAEF,EAAoCxD,oBAAS,GAA7C,mBAAO4I,EAAP,KAAmBC,EAAnB,KACcC,EAAgBC,qBAAWC,KAAjCrJ,KACFsJ,GACI,OAARxF,QAAQ,IAARA,OAAA,EAAAA,EAAUyF,MAAK,SAACC,GAAD,OAAOA,EAAEjH,MAAQ4G,EAAY5G,UAChC,OAAZyG,QAAY,IAAZA,OAAA,EAAAA,EAAchJ,QAASmJ,EAAY5G,IAC/BkH,EAASpI,mBACb,kBAAMP,EAAS0B,MAAK,SAACkH,GAAD,OAAUA,EAAKnH,MAAQuG,OAC3C,CAAChI,EAAUgI,IAEPa,EAAYtI,mBAChB,kBAAMP,EAAS0B,MAAK,SAACkH,GAAD,OAAUA,EAAKnH,OAAL,OAAayG,QAAb,IAAaA,OAAb,EAAaA,EAAchJ,WACzD,CAACc,EAAUkI,IAGPY,EAAyBC,uBAC7B,SAAC/D,EAAMhC,GACL,IAAKA,GAAgC,IAApBA,EAASQ,OAAc,OAAOwB,EAC/C,IAAMgE,EAAgB,GAChBC,EAAiB,GACvBjG,EAASS,SAAQ,SAACC,GAChBuF,EAAehH,KAAKyB,EAAQwF,MAAMC,QAClC,IACE,IAAIC,EAAI1F,EAAQwF,MAAMC,OACtBC,EAAI1F,EAAQwF,MAAMC,OAASzF,EAAQwF,MAAM1F,OACzC4F,IAEAJ,EAAc/G,KAAKmH,MAIvB,IAAMtB,EAAU,GAyBhB,OAxBA9C,EAAKqE,MAAM,IAAI5F,SAAQ,SAAC6F,EAAKF,GAAO,IAAD,EAC3BG,EAAeN,EAAeO,QAAQJ,GAe5C,IAdsB,IAAlBG,GAEFzB,EAAQ7F,KACN,cAAC,EAAD,CAEE+D,YAAW,OACThG,QADS,IACTA,GADS,UACTA,EAAU0B,MACR,SAACC,GAAD,OAAOA,EAAEF,MAAQuB,EAASuG,GAAc9H,cAFjC,aACT,EAEGuE,YAELvE,IAAKuB,EAASuG,GAAc9H,KANvB8H,KAUPP,EAAcS,SAASL,GAE3B,OAAU,IAANA,GAAWJ,EAAcS,SAASL,EAAI,GACjCtB,EAAQ7F,KAAKqH,GAEdxB,EAAQA,EAAQtE,OAAS,GAC/BsE,EAAQA,EAAQtE,OAAS,GAAGkG,OAAOJ,MAEhCxB,IAET,CAAC9H,IAEH,OACE,oBACEsE,UAAWkE,EAAc,qBAAuB,WAChDmB,YAAa,kBAAMvB,GAAc,IACjCnD,aAAc,kBAAMmD,GAAc,IAHpC,SAKE,sBAAK9D,UAAU,MAAf,UACG4D,GACC,cAAC,EAAD,CACElC,YAAW,OAAE6C,QAAF,IAAEA,OAAF,EAAEA,EAAW7C,YACxBlD,IAAKgG,EACHZ,EAAapF,IACboF,EAAalF,UAEf6C,OAAM,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAWhD,OACnBC,MAAK,OAAE+C,QAAF,IAAEA,OAAF,EAAEA,EAAW/C,QAGtB,sBAAKxB,UAAU,UAAf,UACE,cAAC+C,EAAA,EAAD,CAAQpB,IAAG,OAAE0C,QAAF,IAAEA,OAAF,EAAEA,EAAQ9C,OAAQC,MAAK,OAAE6C,QAAF,IAAEA,OAAF,EAAEA,EAAQ7C,QAC5C,cAAC,EAAD,CACEE,YAAW,OAAE2C,QAAF,IAAEA,OAAF,EAAEA,EAAQ3C,YACrB7C,UAAWA,IAEb,qBAAKmB,UAAU,cAAf,SACGwE,EAAuBhG,EAAKE,KAE9BC,GACC,qBAAKqB,UAAU,kBAAf,SACGrB,EAAY2G,KAAI,SAACC,EAAGC,GACnB,OACE,cAAC,EAAD,CAEEhD,IAAK+C,EAAE/C,IACP3F,KAAM0I,EAAE1I,MAFH2I,QAQd3B,GACC,cAAC,EAAD,CACEF,MAAOA,EACP7B,WAAY,kBAAM2B,EAAS,OAACY,QAAD,IAACA,OAAD,EAACA,EAAQ3C,YAAaiC,gB,2CC7DhD8B,EA/DK,SAAC,GAA6C,IAA3C3H,EAA0C,EAA1CA,OAAQG,EAAkC,EAAlCA,QAASvC,EAAyB,EAAzBA,SAAayG,EAAY,iBACzDuD,EAAiB3F,mBACjB4F,EAAc5F,mBACpB,EAAoC9E,oBAAS,GAA7C,mBAAO2K,EAAP,KAAmBC,EAAnB,KACA,EAAsC5K,oBAAS,GAA/C,mBAAO6K,EAAP,KAAoBC,EAApB,KAsBA,OAXAtJ,qBAAU,WAER,OADAsJ,GAAe,GACR,WACLF,GAAc,MAEf,CAAC/H,IAEJrB,qBAAU,YAhBV,WAA2B,IAAD,EACxB,UAAAiJ,EAAenF,eAAf,SAAwByF,eAAe,CACrCC,SAAU,OACVC,MAAO,MACPC,OAAQ,SACRC,YAAY,IAYdC,KACC,CAACpI,IAGF,qBAAK+B,UAAU,eAAf,SACE,sBACEA,UAAU,WACVsG,IAAKX,EACLvD,MAAO,CAAEmE,QAASX,EAAa,EAAI,GACnCY,OAAM,gCAAE,wGACAC,EAA8Bd,EAAYpF,SAD1C,OAENsF,GAAc,GAFR,2CAIRa,SAAQ,gCAAE,2FACHZ,EADG,iEAEFW,EAA8Bd,EAAYpF,SAFxC,OAGRsF,GAAc,GACdE,GAAe,GAJP,2CARZ,UAeE,qBAAK/F,UAAU,mBAAf,SACE,6BACG/B,EAAQqH,KAAI,SAACqB,GACZ,OACE,cAAC,EAAD,aAEEnD,QAASmD,EACTjL,SAAUA,GACNyG,GAHCwE,EAAIhD,cASnB,sBAAM2C,IAAKZ,UAQnB,SAASe,EAA8BnG,GACrC,OAAO,IAAIsG,SAAQ,SAACC,GAClBC,uBAGA,SAASC,IACP,GAAIzG,EAAG0G,aAAe1G,EAAG2G,aAAe3G,EAAG4G,UAAY,GAAI,CACzD,GAAIC,IAAc,GAAI,OAAON,IAE7BC,sBAAsBC,OAN1B,IAAII,EAAY,K,8CC7CLC,G,OAtBE,SAAC,GAA4B,IAA1B1F,EAAyB,EAAzBA,YAAa2F,EAAY,EAAZA,MAC/B,OACE,qBAAKrH,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,8BACE,sBAAKA,UAAU,UAAf,wBACc,IACZ,sBAAMA,UAAU,eAAhB,SAAgC0B,SAGpC,qBAAK1B,UAAU,kBAAf,SACE,cAAC+B,EAAA,EAAD,CACEnB,QAASyG,EACTlH,IAAKmH,IACLtH,UAAU,uB,oCCEPuH,G,OAnBO,SAAC,GAAkB,IAAhBjF,EAAe,EAAfA,SACvB,OACE,qBAAKtC,UAAU,iBAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,iCACE,2CAEDsC,EAASpD,OAAS,EACjB,6BAAKoD,IAEL,qBAAKtC,UAAU,eAAf,SACE,2DC0IGwH,EA9IM,SAAC,GAUf,IATLC,EASI,EATJA,gBACAC,EAQI,EARJA,SACAhM,EAOI,EAPJA,SACA+C,EAMI,EANJA,QACAqD,EAKI,EALJA,WACA6F,EAII,EAJJA,cACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,OAEA,EAAsC7M,oBAAS,kBAC7C8M,cAAYC,iBADd,mBAAOC,EAAP,KAAoBC,EAApB,KAIA,EAA4CjN,oBAAS,GAArD,mBAAOkN,EAAP,KAAuBC,EAAvB,KACA,EAAsCnN,mBAASS,GAA/C,mBAAO2M,EAAP,KAAoBC,EAApB,KACQtN,EAAagJ,qBAAWuE,KAAxBvN,SAER,EAAwCiB,mBAAQ,WAC9C,IAAMuM,EAAgBC,YAAoB,CACxCC,iBAAkBxG,IAMpB,MAAO,CAAEyG,QADO,CAACH,GACCI,mBAHaJ,EAAvBI,sBAIP,IATKA,EAAR,EAAQA,mBAAoBD,EAA5B,EAA4BA,QAkG5B,OACE,sBAAK3I,UAAU,gBAAf,UACE,cAAC,IAAD,CACEsG,IAAKmB,EACLoB,UAAW,SACXZ,YAAaA,EACba,SA7FN,SAAkBb,GAChBC,EAAeD,IA6FXU,QAASA,EACTI,aAzEN,SAAsBC,GACpB,GACO,UADCA,EAAEC,IAEN,MAAO,cAuEPC,iBAlEN,SAAsBC,GACpB,GACO,eADCA,GADiB,mCAGrBC,GAHqB,sDAQzB,uBAOWC,EAPX,wFAOWA,EAPX,WAQI,IAAK,IAAMJ,KAAOK,EAAIC,UACpBC,EAAW7L,KAAK,CACdR,IAAKmM,EAAIC,UAAUN,GAAKtM,KAAKyC,QAAQjC,MAIzCM,OAAOC,KAAK4L,EAAIG,OAAO,GAAGC,cAAcvK,SAAQ,SAAC8J,EAAKnE,GACpD0E,EAAW1E,GAAX,2BACK0E,EAAW1E,IADhB,IAEEF,MAAO0E,EAAIG,OAAO,GAAGC,aAAa5E,SAhBlC6E,EAAelL,EAAUA,EAAQQ,MAAQ,KAEzCqK,EAAMM,uBAAa3B,EAAY4B,qBAE/BL,EAAa,GACnBH,IAiBM7K,EAAM8K,EAAIG,OAAO,GAAG/I,KAvB5B,SA0BSiH,GAAkBnJ,EA1B3B,qDA4BQmJ,EA5BR,kCA4B8CC,IA5B9C,QA4BuBkC,EA5BvB,gCA6BUhC,EAAOtJ,EAAKmL,EAAcH,EAAYM,GA7BhD,QA8BIjC,IACA/F,IAGMiI,EAAiBhC,cAAYpK,KACjCsK,EACA+B,eAAaC,eAAe,KAExBC,EAAejC,EAAYkC,eAC3BC,EAA4BrC,cAAYsC,eAC5CN,EACAG,GAEFhC,EAAekC,GA3CnB,kDA6CIpP,EAAS,KAAMgC,SA7CnB,2DARyB,wBAmErBsN,YAAW,kBAAa5C,KAE1B,cAACkB,EAAD,CACE2B,KAAMpC,EACNqC,aAjGN,SAAsBC,GACpBrC,EAAkBqC,IAiGdC,eAAgBzJ,IAChB0J,iBAAkBpD,EAClBc,YAAaA,EACbuC,eAjGN,YAAmC,IAGVC,EAHAC,EAAS,EAATA,MACvBxC,GAEuBuC,EAFMC,EAGpBpP,EACJqP,MAAK,SAACxF,EAAGyF,GACR,OAAIzF,EAAE7D,cAAgBsJ,EAAEtJ,YAAoB,EACrC6D,EAAE7D,YAAcsJ,EAAEtJ,YAAc,GAAK,KAE7CuJ,QAAO,SAAC5N,GAAD,uBAAOA,EAAEqE,mBAAT,aAAO,EAAeyD,SAAS0F,MACtCI,QAAO,SAACtE,EAAK7B,GAAN,OAAYA,EAAI,QAwFxBoG,kBAAkB,Q,iGC1FXC,EA9CC,SAAC,GAMV,IALL1M,EAKI,EALJA,QACAE,EAII,EAJJA,YACAyM,EAGI,EAHJA,qBACAC,EAEI,EAFJA,iBACGlJ,EACC,iBACEC,EAAQ3D,EACV,CAAE6M,oBAAqB,EAAGC,qBAAsB,GAChD,CAAED,oBAAqB,MAAOC,qBAAsB,OACxD,OACE,sBAAKvL,UAAU,kBAAkBoC,MAAOA,EAAxC,UACE,sBAAKpC,UAAU,kBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAACwL,EAAA,EAAD,CACEC,WAAYL,EACZM,eAAe,iBAFjB,SAIE,qBAAK1L,UAAU,WAAf,SACE,qBAAK0C,IAAKiJ,IAAc1J,IAAI,wBAIlC,cAAC,EAAD,aACExD,QAASA,EACTkJ,cAAehJ,EAAYO,OAAS,GAChCiD,OAGPxD,EAAYO,OAAS,GACpB,qBAAKc,UAAU,kBAAf,SACGrB,EAAY2G,KAAI,SAACsG,EAAGpG,GACnB,OACE,cAAC,EAAD,CAEE3I,KAAM+O,EAAE/O,KACR4F,OAAQ,kBAAM4I,EAAiBO,KAF1BpG,YCtBNqG,G,OAfe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMrJ,EAAa,EAAbA,OACrC,OACE,sBAAKzC,UAAU,0BAAf,UACE,sBAAKA,UAAU,UAAf,uBACY,sBAAMA,UAAU,eAAhB,SAAgC8L,EAAKjP,OAC/C,uBAAMmD,UAAU,mBAAhB,UAAoC8L,EAAKC,SAAzC,UAGF,qBAAK/L,UAAU,UAAf,SACE,cAAC+B,EAAA,EAAD,CAAS5B,IAAK0C,IAAUjC,QAAS6B,W,oCC0F1BuJ,EAtFQ,SAAC,GAAuC,IAArCvN,EAAoC,EAApCA,QAASqD,EAA2B,EAA3BA,WAAeK,EAAY,iBACpDnH,EAAagJ,qBAAWuE,KAAxBvN,SACR,EAAsCC,mBAAS,IAA/C,mBAAO0D,EAAP,KAAoBsN,EAApB,KACA,EAAsChR,mBAAS,IAA/C,mBAAOiR,EAAP,KAAoBC,EAApB,KACMC,EAAoBrM,mBAmD1B,OAjDAsM,2BAAgB,WACdD,EAAkB7L,QAAQ6B,MAAMkK,IAAhC,WACEF,EAAkB7L,QAAQ0G,aAAe,GAD3C,SAiDA,uBACEjH,UAAU,WACVnD,KAAK,WACL0P,SAAUC,EAHZ,UAKE,qBAAKxM,UAAU,mBAAmBsG,IAAK8F,EAAvC,SACGF,EAAY5G,KAAI,SAACmH,EAAGjH,GACnB,OAAO,cAAC,EAAD,CAAiCsG,KAAMW,GAAXjH,QAGtC/G,GACC,cAAC,EAAD,CACEiD,YAAajD,EAAQiD,YACrB2F,MAAO,kBAAMvF,OAGjB,cAAC,EAAD,aACErD,QAASA,EACTE,YAAaA,EACbyM,qBA5BN,SAA8BsB,GAC5B,GAA2B,IAAvB/N,EAAYO,OACd,OAAOlE,EAAS,2CAClBiR,GAAe,SAACU,GAAD,4BAAcA,GAAd,CAAoBD,QA0B/BrB,iBAxBN,SAA0BqB,GACxBT,GAAe,SAACU,GAAD,OAAUA,EAAK1B,QAAO,SAACjG,GAAD,OAASA,IAAQ0H,SAwBlD5K,WAAYA,EACZ8F,kBAlEN,WACE,GAA2B,IAAvBjJ,EAAYO,OAAhB,CACA,IAAM0N,EAAI,YAAOjO,GAEjB,OADAsN,EAAe,IACRrF,QAAQiG,IACbD,EAAKtH,IAAL,iDAAS,WAAOsG,GAAP,4FACDE,EAAOgB,YAAYlB,GACnBxP,EAAK2Q,MACXZ,GAAe,SAACQ,GAAD,4BACVA,GADU,CAEb,CACEvQ,KACA0P,OACAjP,KAAM+O,EAAE/O,KACRkP,SAAUH,EAAEG,eAGhBiB,YAAuBlB,GAAM,SAAqBC,GAChDI,GAAe,SAACQ,GAAD,OACbA,EAAKrH,KAAI,SAACmH,GACR,OAAIA,EAAErQ,KAAOA,EAAW,2BAAKqQ,GAAZ,IAAeV,aACzBU,WAhBN,SAoBDX,EApBC,uBAqBemB,YAAenB,EAAKoB,SAAS5G,KArB5C,cAqBD6G,EArBC,yBAuBA,CACLtQ,KAAM+O,EAAE/O,KACR2F,IAAK2K,IAzBA,4CAAT,0DA8DEtF,mBAAoB,kBAAMsE,EAAe,MACrChK,QAQZ,SAASqK,EAAcxD,GACrBA,EAAEoE,iB,aCzCWC,IA1DK,SAAC,GAMd,IALL7N,EAKI,EALJA,KACAvB,EAII,EAJJA,QACAvC,EAGI,EAHJA,SACA6C,EAEI,EAFJA,UACA+O,EACI,EADJA,UAEQ1S,EAASoJ,qBAAWC,KAApBrJ,KACAI,EAAagJ,qBAAWuE,KAAxBvN,SACAH,EAAc0S,cAAd1S,UACR,EAA8BI,qBAA9B,mBAAOwD,EAAP,KAAgBqD,EAAhB,KACM2F,EAAkB1H,mBALpB,sDAYJ,iHAEUyN,YAAmB5S,EAAMC,GAFnC,sDAIIG,EAAS,KAAMgC,SAJnB,yDAZI,sBAoBJ,OACE,uBAAMZ,GAAG,OAAT,UACE,cAAC,EAAD,CACE0B,OAAQ0B,EAAKpD,GACb6B,QAASA,EACTvC,SAAUA,EACVoG,WAAYA,EACZ2B,UApBN,SAAmB/B,EAAazC,GAC9B6C,EAAW,CAAEJ,cAAazC,UAC1BwI,EAAgBlH,QAAQkN,WAoBpBH,EAUA,sBAAKtN,UAAU,mBAAf,UACE,cAAC0N,GAAA,EAAD,CACE1N,UAAU,SACVU,KAAK,YACLE,QA3CN,6CAuCE,6BATA,cAAC,EAAD,CACElF,SAAUA,EACVoM,OAAQvJ,EACRmJ,SAAUlI,EAAK3C,KACf4B,QAASA,EACTqD,WAAYA,EACZ2F,gBAAiBA,S,iDCtDZ,MAA0B,sCCA1B,MAA0B,wC,eCmC1BkG,IA1BA,SAAC,GAA+C,IAA7CnO,EAA4C,EAA5CA,KAAMoO,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QAC9C,OACE,0BAAS9N,UAAW4N,EAAW,iBAAmB,UAAlD,UACGpO,GACC,mCACGoO,GACC,8BACE,cAAC7L,EAAA,EAAD,CAAS5B,IAAK4N,EAASnN,QAASkN,MAGpC,qBAAK9N,UAAU,oBAAf,SAAoCR,EAAK3C,UAG7C,qBAAKmD,UAAU,UAAf,SACGR,GACC,qBAAKQ,UAAU,oBAAf,SACG4N,GACC,cAAC7L,EAAA,EAAD,CAAS5B,IAAK6N,EAASpN,QAASiN,a,yGCiB/BI,IAnCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC3BA,EAAQA,GAAS,GAEjB,IAAMC,EAAWrO,iBAAO,IAElBsO,ECXO,SAA0BH,EAAMC,EAAOC,GACpD,MAA0CnT,mBAAS,IAAnD,mBAAOoT,EAAP,KAAsBC,EAAtB,KAqBA,OApBA7R,qBAAU,WACR0R,EAAMhP,SAAQ,SAAC7B,GACb,GAAK8Q,EAAL,CAEA,IAAMG,EAAYL,EAAKjD,QAAO,SAACrQ,GAC7B,MAAa,WAAT0C,GAA2B1C,EAAK0C,KAC7B1C,EAAK0C,OAASA,KACpB4B,OAEW,IAAdqP,EACIH,EAAS7N,QAAQjD,GAAMkR,UAAUC,IAAI,UACrCL,EAAS7N,QAAQjD,GAAMkR,UAAUE,OAAO,UAE5CJ,GAAiB,SAAC3B,GAAD,mBAAC,eACbA,GADY,kBAEdrP,EAFc,aAEDiR,cAGjB,CAACJ,EAAOC,EAAUF,IAEdG,EDXeM,CAAiBT,EAAMC,EAAOC,GAEpD,OACE,uBAAOpO,UAAU,YAAjB,SACGmO,EAAM7I,KAAI,SAAChI,EAAMwH,GAChB,OAEE,aADA,CACC8J,EAAA,EAAD,CAEEC,OAAQ,SAACvO,GAAD,OAAS8N,EAAS7N,QAAQjD,GAAQgD,GAC1CwO,IAAKxR,EACLyR,cAAeV,EAAc/Q,GAC7B0C,UAAU,qBALZ,SAOGkO,EACEjD,QAAO,SAACrQ,GACP,OAAIA,EAAK0C,OAASA,IACb1C,EAAK0C,MAAiB,WAATA,KAGnBgI,KAAI,SAAC1K,GAAD,OACH,cAACqG,EAAA,EAAD,CAA4BrG,KAAMA,GAAhBA,EAAKuC,SAbtB2H,U,mKE+FFkK,EA3FM,SAAC,GAAc,IAAZxP,EAAW,EAAXA,KACd3E,EAAc0S,cAAd1S,UACAS,EAAmB0I,qBAAWvJ,KAA9Ba,eACAN,EAAagJ,qBAAWuE,KAAxBvN,SAER,EACEiU,YAAe,CACbC,UAAW1P,EAAK3C,KAChBsS,cAAe3P,EAAK4P,WAHhBC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eAAgBC,EAArC,EAAqCA,aAKrC9S,qBAAU,WACR6S,EAAe,CACbJ,UAAW1P,EAAK3C,KAChBsS,cAAe3P,EAAK4P,aAErB,CAAC5P,EAAM8P,IAEV,IAAME,EAAYzP,mBAClBtD,qBAAU,WAER,OADA+S,EAAUjP,SAAU,EACb,kBAAOiP,EAAUjP,SAAU,KACjC,IACH,MAAgCkP,YAAWD,GAAnCE,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WACjB,EAAgC1U,oBAAS,GAAzC,mBAAO2U,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACGH,GAAW,cAACI,EAAA,EAAD,CAASpP,KAAMgP,IAC3B,0BAAS1P,UAAU,gBAAnB,UACE,iCACE,4CAEF,qBAAKA,UAAU,gBAAf,SACE,uBACEA,UAAU,aACVuM,SAAQ,iDAAE,WAAOvD,GAAP,sFACRA,EAAEoE,iBADM,SAGNyC,GAAY,GAECnI,EAET2H,EAFFU,UACeC,EACbX,EADFY,cAEEvI,IAAalI,EAAK3C,KARhB,gCASEqT,YAAerV,EAAW2E,EAAKpD,GAAIsL,GATrC,UAWFsI,IAAiBxQ,EAAK4P,SAXpB,qDAawC,IAA1C9T,EAAe4J,QAAQ8K,GAbrB,kCAcEG,YAAmBtV,EAAWmV,GAdhC,yBAeAI,YACJvV,EACA2E,EAAKpD,GACL4T,GAlBI,QAqBFR,EAAUjP,UACZsP,GAAY,GACZF,EAAW,kBAvBP,kDA0BN3U,EAAS,KAAMgC,SA1BT,0DAAF,sDAFV,UAgCE,cAACqT,EAAA,EAAD,CACEC,MAAO,YACPzT,KAAK,YACLiM,SAAUyG,EACVzE,MAAOuE,EAAYH,YAErB,cAACmB,EAAA,EAAD,CACEC,MAAO,gBACPzT,KAAK,gBACLiM,SAAUyG,EACVzE,MAAOuE,EAAYF,gBAErB,qBAAKnP,UAAU,UAAf,SACE,cAAC0N,EAAA,EAAD,CACE1N,UAAU,SACVU,KAAK,eACL6P,KAAK,SACLC,QAASZ,kB,gBCpCVa,IA1DM,SAAC,GAAqB,IAAnBjR,EAAkB,EAAlBA,KAAM6H,EAAY,EAAZA,MACpBqJ,EAAa1M,qBAAWuE,KAAxBmI,SACR,EAA8BnD,cAAtB1S,EAAR,EAAQA,UAAWiD,EAAnB,EAAmBA,OAES8P,EACxB+C,cADFC,cAAiBrQ,QAGnB,EAA0BsQ,sBAAW,SAACC,EAAOC,GAC3C,GAAoB,YAAhBA,EAAOR,KACT,OAAQQ,EAAOC,SACb,IAAK,WACH,MAAO,WACT,IAAK,cACH,gCAAC,iHAESC,YAAWpW,EAAWiD,GAF/B,OAGGuJ,IAHH,+CAKGqJ,EAAS,KAAM1T,SALlB,uDAAD,GAQA,MACF,QACE,MAAM,IAAIkU,IAAM,0BAGrB,YAnBH,mBAAOJ,EAAP,KAAcK,EAAd,KAqBA,OACE,cAACC,EAAA,EAAD,CACEC,OAAQ,kBAAM,gCACdC,QAAS,kBAAM,gCACf1D,SAAUA,EAHZ,SAKG,SAAC2D,GAAD,OACC,cAACA,EAAD,CACElK,MAAOA,EACPmK,WAAY,CAAC,GAAD,OAAIhS,EAAK3C,MAAQ,QAC7B4U,QAAS,CACPC,EACE,WADyB,UAEtBlS,EAAK3C,OACR,GAEF6U,EAA4B,cAAe,SAE7CP,SAAUA,EAXZ,SAaGL,GACC,CACEa,SAAU,cAAC,EAAD,CAAcnS,KAAMA,KAC9BsR,SASd,SAASY,EAA4BhR,EAAM0O,EAAUwC,GACnD,MAAO,CACLlR,OACA0O,WACAwC,e","file":"static/js/3.d5294272.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const ChannelContext = createContext(null);\n","import { useState, useMemo, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n  getChannelInfo,\n  detachListenersForChannel,\n  getInfoForVisitingChannel,\n} from '../channel_firebaseStuff';\n\nexport default function useOnChannelEnter(\n  user,\n  channelID,\n  channelList,\n  updateChannel,\n  setError,\n) {\n  const [visitingChannel, setVisitingChannel] = useState();\n  const [roleList, setRoleList] = useState(['Online']);\n  const [roomCategories, setRoomCategories] = useState(['none']);\n  const [roomList, setRoomList] = useState([]);\n  const [userList, setUserList] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [userRole, setUserRole] = useState();\n\n  const isVisiting = useMemo(\n    () => channelList?.every((c) => c.id !== channelID),\n    [channelList, channelID],\n  );\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(\n    function onVisitToChannelNotSubscribedTo() {\n      if (!user || !channelList) return;\n      (async () => {\n        if (!channelID || !isVisiting) return setVisitingChannel();\n        if (visitingChannel) return;\n        try {\n          const data = await getInfoForVisitingChannel(channelID);\n          const channelInfo = {\n            name: data[0],\n            icon: data[1],\n            defaultRoom: data[2],\n          };\n          setVisitingChannel(channelInfo);\n        } catch (error) {\n          setError(error.message);\n        }\n      })();\n    },\n    [\n      user,\n      channelID,\n      channelList,\n      visitingChannel,\n      isVisiting,\n      setError,\n    ],\n  );\n  useEffect(() => {\n    if (!channelID || !user) return;\n    (async () => {\n      try {\n        await getChannelInfo(\n          channelID,\n          updateChannel,\n          setRoomCategories,\n          setRoomList,\n          setRoleList,\n          setUserList,\n          setOnlineUsers,\n        );\n      } catch (error) {\n        setError(error.message);\n      }\n    })();\n\n    return () => {\n      detachListenersForChannel(channelID, user.uid);\n    };\n  }, [channelID, isVisiting, updateChannel, user, setError]);\n\n  useEffect(() => {\n    if (!user || !userList) return;\n    setUserRole(userList.find((u) => u.uid === user.uid)?.role);\n  }, [user, userList]);\n\n  useEffect(\n    function redirectToDefaultRoom() {\n      if (!user || !channelList) return;\n      if (\n        location.pathname === `/channels/${channelID}` ||\n        location.pathname === `/channels/${channelID}/`\n      ) {\n        // `/channels/${channelID}/` is pathname before user is redirected into default room\n        if (isVisiting) {\n          if (!visitingChannel) return;\n          const defaultRoomID = Object.keys(\n            visitingChannel.defaultRoom,\n          )[0];\n          history.push(`/channels/${channelID}/${defaultRoomID}`);\n        } else {\n          const defaultRoomID =\n            channelList &&\n            Object.keys(\n              channelList?.find((c) => c.id === channelID)\n                .defaultRoom,\n            )[0];\n          history.replace(`/channels/${channelID}/${defaultRoomID}/`);\n        }\n      }\n    },\n    [\n      user,\n      channelID,\n      channelList,\n      history,\n      isVisiting,\n      visitingChannel,\n      location.pathname,\n    ],\n  );\n\n  return {\n    visitingChannel,\n    roleList,\n    roomCategories,\n    roomList,\n    userList,\n    onlineUsers,\n    userRole,\n  };\n}\n","import { useState, useEffect } from 'react';\nimport {\n  detachListenersForRoom,\n  pushToMsgList,\n  getRoomStuff,\n} from '../room_firebaseStuff';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport {\n  dealWithReadMentions,\n  updateMentions,\n} from '../user_firebaseStuff';\n\nexport default function useOnRoomEnter(\n  user,\n  channelID,\n  roomID,\n  setRoomName,\n  finishLoading,\n  setError,\n) {\n  const [msgList, setMsgList] = useState([]);\n\n  useEffect(() => {\n    if (!user || !channelID || !roomID) return;\n    onRoomEnter();\n\n    async function onRoomEnter() {\n      try {\n        await getRoomStuff(\n          roomID,\n          setRoomName,\n          setMsgList,\n          finishLoading,\n        );\n        await dealWithReadMentions(user.uid, channelID, roomID);\n      } catch (error) {\n        setError(error.message);\n      }\n    }\n    return async function () {\n      try {\n        detachListenersForRoom(roomID);\n        await dealWithReadMentions(user.uid, channelID, roomID); // for any mentions that occur when user is in room\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n  }, [roomID, channelID, user, setRoomName, finishLoading, setError]);\n\n  return { msgList, submitMsg };\n\n  async function submitMsg(msg, replyTo, mentions, attachments) {\n    const msgObj = {\n      msg,\n      user: user.uid,\n      replyTo: replyTo || null,\n      mentions: mentions || null,\n      attachments: attachments || null,\n      timestamp: getUnixTime(new Date()),\n    };\n    const msgID = await pushToMsgList(roomID, msgObj);\n\n    if (mentions.length > 0)\n      mentions.forEach(async (mention) => {\n        try {\n          await updateMentions(mention.uid, channelID, roomID, msgID);\n        } catch (error) {\n          setError(error.message);\n        }\n      });\n  }\n}\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NavLink } from 'react-router-dom';\n\nimport MentionCounter from '../ChannelNav/MentionCounter';\nimport IconBtn from '../IconBtn';\nimport Tooltip from '../Tooltip';\n\nimport settingsSVG from '../../assets/svg/settings-3-fill.svg';\n\nconst RoomLink = ({\n  channel,\n  room,\n  mentionCount,\n  isAdmin,\n  editRoom,\n}) => {\n  const [toolTipInfo, setToolTipInfo] = useState();\n  const actionsRef = useRef({});\n  return (\n    <>\n      <li className=\"room-link-item\">\n        <NavLink\n          to={`/channels/${channel.id}/${room.id}`}\n          className=\"content\"\n          activeClassName=\"active\"\n        >\n          <span>{room.name}</span>\n          {isAdmin && (\n            <div className=\"actions\">\n              <IconBtn\n                svg={settingsSVG}\n                elRef={(el) => (actionsRef.current.settings = el)}\n                onMouseEnter={() =>\n                  setToolTipInfo({\n                    text: 'Edit Room',\n                    el: actionsRef.current.settings,\n                  })\n                }\n                onMouseLeave={() => setToolTipInfo()}\n                onClick={editRoom}\n              />\n            </div>\n          )}\n          {mentionCount && <MentionCounter count={mentionCount} />}\n        </NavLink>\n      </li>\n      {toolTipInfo && (\n        <Tooltip\n          text={toolTipInfo.text}\n          posInfo={toolTipInfo.el.getBoundingClientRect()}\n          direction=\"top\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default RoomLink;\n\nRoomLink.propTypes = {\n  channel: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n  room: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n  }),\n  mentionCount: PropTypes.number,\n  isAdmin: PropTypes.bool,\n  editRoom: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Avatar from '../Avatar';\n\nconst UserDisplay = ({\n  className,\n  id,\n  user,\n  onClick,\n  selectMention, // need this here so it doesn't get fed into parentProps\n  mention,\n  theme, // need this here so it doesn't get fed into parentProps\n  searchValue, // need this here so it doesn't get fed into parentProps\n  isFocused,\n  ...parentProps\n}) => {\n  if (isFocused) className += ' user-focused';\n\n  user = user || mention;\n  const { avatar, color, status, displayName } = user;\n\n  return (\n    <li\n      className={`user-wrapper ${className}`}\n      onClick={onClick}\n      {...parentProps}\n    >\n      <Avatar img={avatar} color={color} userStatus={status} />\n      <div className=\"content\">\n        <span>{displayName}</span>\n\n        <span className=\"subText\"></span>\n      </div>\n    </li>\n  );\n};\n\nexport default UserDisplay;\n\nUserDisplay.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  user: PropTypes.object,\n  onClick: PropTypes.func,\n  selectMention: PropTypes.func,\n  mention: PropTypes.object,\n  theme: PropTypes.object,\n  searchValue: PropTypes.string,\n  isFocused: PropTypes.bool,\n};\n","export default __webpack_public_path__ + \"static/media/reply-fill.94bd357e.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/MsgButtons.css';\n\nimport replyIcon from '../../assets/svg/reply-fill.svg';\nimport IconBtn from '../IconBtn';\n\nconst MsgButtons = ({ setReplyTo }) => {\n  return (\n    <div className=\"msg-btns btn-ctn\">\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <IconBtn\n            svg={replyIcon}\n            alt=\"reply button\"\n            onClick={setReplyTo}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MsgButtons;\n\nMsgButtons.propTypes = {\n  setReplyTo: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/MentionWrapper.css';\n\nconst MentionWrapper = ({\n  displayName,\n  uid,\n  id,\n  mention,\n  ...props\n}) => {\n  displayName = displayName || mention?.displayName;\n  uid = uid || mention?.uid;\n  return (\n    <span className=\"mention-wrapper\" data-uid={uid} data-id={id}>\n      {displayName && <span>@{displayName}</span>}\n      <span style={{ display: 'none' }}>{props.children}</span>\n    </span>\n  );\n};\n\nexport default MentionWrapper;\n\nMentionWrapper.propTypes = {\n  displayName: PropTypes.string,\n  uid: PropTypes.string,\n  id: PropTypes.string,\n  mention: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]),\n};\n","export default __webpack_public_path__ + \"static/media/attach_file_black_24dp.66ab46ba.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport IconBtn from '../IconBtn';\n\nimport closeSVG from '../../assets/svg/close-circle-fill.svg';\nimport paperclipSVG from '../../assets/svg/attach_file_black_24dp.svg';\n\nimport '../../styles/AttachmentWrapper.css';\n\nconst AttachmentWrapper = ({ name, url, cancel }) => {\n  return (\n    <div className=\"attachment-wrapper\">\n      <div className=\"content\">\n        <div className=\"icon-wrapper\">\n          <img src={paperclipSVG} alt=\"uploaded file icon\" />\n        </div>\n        {url ? (\n          <a className=\"link-wrapper text-wrapper\" href={url}>\n            {name}\n          </a>\n        ) : (\n          <div className=\"text-wrapper\">{name}</div>\n        )}\n      </div>\n      {cancel && (\n        <div className=\"actions\">\n          <IconBtn svg={closeSVG} onClick={cancel} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AttachmentWrapper;\n\nAttachmentWrapper.propTypes = {\n  name: PropTypes.string,\n  url: PropTypes.string,\n  cancel: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Avatar from '../Avatar';\n\nconst ReplyContext = ({ displayName, avatar, color, msg }) => {\n  return (\n    <div className=\"msg-reply-context\">\n      <Avatar img={avatar} color={color} />\n      <span className=\"display-name\">{displayName}</span>\n      <div className=\"replied-text-preview\">\n        <div className=\"content\">{msg}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyContext;\n\nReplyContext.propTypes = {\n  displayName: PropTypes.string,\n  avatar: PropTypes.string,\n  color: PropTypes.string,\n  msg: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n};\n","import fromUnixTime from 'date-fns/fromUnixTime';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nimport format from 'date-fns/format';\n\nfunction convertTimestampToString(timestamp) {\n  const dateObj = fromUnixTime(timestamp);\n\n  if (isToday(dateObj)) {\n    return `Today at ${format(dateObj, \"K':'mm a\")}`;\n  }\n  if (isYesterday(dateObj))\n    return `Yesterday at ${format(dateObj, \"K':'mm a\")}`;\n\n  return format(dateObj, \"M'/'d'/'y\");\n}\n\nexport { convertTimestampToString };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { convertTimestampToString } from '../../logic/date';\n\nconst MsgHeader = ({ displayName, timestamp }) => {\n  return (\n    <header>\n      <span className=\"display-name\">{displayName}</span>\n      <span className=\"timestamp\">\n        {convertTimestampToString(timestamp)}\n      </span>\n    </header>\n  );\n};\n\nexport default MsgHeader;\n\nMsgHeader.propTypes = {\n  displayName: PropTypes.string,\n  timestamp: PropTypes.number,\n};\n","import React, {\n  useContext,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\n\nimport Avatar from '../Avatar';\nimport MsgButtons from './MsgButtons';\nimport MentionWrapper from './MentionWrapper';\nimport AttachmentWrapper from '../Upload/AttachmentWrapper';\nimport ReplyContext from './ReplyContext';\nimport MsgHeader from './MsgHeader';\n\nimport '../../styles/ChatMsg.css';\n\nconst ChatMsg = ({ content, userList, onReplyTo }) => {\n  const {\n    user: senderID,\n    msg,\n    timestamp,\n    msgId,\n    mentions,\n    attachments,\n    replyTo: replyContext,\n  } = content;\n  const [isShowBtns, setIsShowBtns] = useState(false); // buttons on hover\n  const { user: currentUser } = useContext(UserContext);\n  const isMentioned =\n    mentions?.some((m) => m.uid === currentUser.uid) ||\n    replyContext?.user === currentUser.uid;\n  const sender = useMemo(\n    () => userList.find((uObj) => uObj.uid === senderID),\n    [userList, senderID],\n  );\n  const replyUser = useMemo(\n    () => userList.find((uObj) => uObj.uid === replyContext?.user),\n    [userList, replyContext],\n  );\n\n  const convertPlaintextToHTML = useCallback(\n    (text, mentions) => {\n      if (!mentions || mentions.length === 0) return text;\n      const mentionRanges = []; // text indexes that contain a mention\n      const mentionOffsets = []; // beginning index of each mention\n      mentions.forEach((mention) => {\n        mentionOffsets.push(mention.range.offset);\n        for (\n          let i = mention.range.offset;\n          i < mention.range.offset + mention.range.length;\n          i++\n        ) {\n          mentionRanges.push(i);\n        }\n      });\n\n      const content = [];\n      text.split('').forEach((val, i) => {\n        const mentionIndex = mentionOffsets.indexOf(i); // find which mention has offset i\n        if (mentionIndex !== -1)\n          // marks beginning of mention\n          content.push(\n            <MentionWrapper\n              key={mentionIndex}\n              displayName={\n                userList?.find(\n                  (u) => u.uid === mentions[mentionIndex].uid,\n                )?.displayName\n              }\n              uid={mentions[mentionIndex].uid}\n            />,\n          );\n\n        if (mentionRanges.includes(i)) return; // rest of the mention, can skip because mentionWrapper already inserted\n\n        if (i === 0 || mentionRanges.includes(i - 1))\n          return content.push(val); // marks beginning of non-mention string\n\n        return (content[content.length - 1] =\n          content[content.length - 1].concat(val)); // string continues\n      });\n      return content;\n    },\n    [userList],\n  );\n  return (\n    <li\n      className={isMentioned ? 'chat-msg mentioned' : 'chat-msg'}\n      onMouseOver={() => setIsShowBtns(true)}\n      onMouseLeave={() => setIsShowBtns(false)}\n    >\n      <div className=\"msg\">\n        {replyContext && (\n          <ReplyContext\n            displayName={replyUser?.displayName}\n            msg={convertPlaintextToHTML(\n              replyContext.msg,\n              replyContext.mentions,\n            )}\n            avatar={replyUser?.avatar}\n            color={replyUser?.color}\n          />\n        )}\n        <div className=\"content\">\n          <Avatar img={sender?.avatar} color={sender?.color} />\n          <MsgHeader\n            displayName={sender?.displayName}\n            timestamp={timestamp}\n          />\n          <div className=\"msg-content\">\n            {convertPlaintextToHTML(msg, mentions)}\n          </div>\n          {attachments && (\n            <div className=\"attachments-ctn\">\n              {attachments.map((a, idx) => {\n                return (\n                  <AttachmentWrapper\n                    key={idx}\n                    url={a.url}\n                    name={a.name}\n                  />\n                );\n              })}\n            </div>\n          )}\n          {isShowBtns && (\n            <MsgButtons\n              msgId={msgId}\n              setReplyTo={() => onReplyTo(sender?.displayName, msgId)}\n            />\n          )}\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default ChatMsg;\n\nChatMsg.propTypes = {\n  content: PropTypes.object,\n  userList: PropTypes.arrayOf(PropTypes.object),\n  onReplyTo: PropTypes.func,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChatMsg from './ChatMsg';\n\nimport '../../styles/ChatDisplay.css';\n\nconst ChatDisplay = ({ roomID, msgList, userList, ...props }) => {\n  const messagesEndRef = useRef();\n  const scrollerRef = useRef();\n  const [isScrolled, setIsScrolled] = useState(true); // used to hide display when the auto scroll is in action; the auto scroll only affects display when you move from room to room so isScrolled can be initiated to true\n  const [firstRender, setFirstRender] = useState(true);\n\n  function scrollToBottom() {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: 'auto',\n      block: 'end',\n      inline: 'center',\n      alignToTop: false,\n    });\n  }\n\n  useEffect(() => {\n    setFirstRender(true);\n    return () => {\n      setIsScrolled(false);\n    };\n  }, [roomID]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [msgList]);\n\n  return (\n    <div className=\"messages-ctn\">\n      <div\n        className=\"scroller\"\n        ref={scrollerRef}\n        style={{ opacity: isScrolled ? 1 : 0 }}\n        onLoad={async () => {\n          await notifyWhenScrollingIsFinished(scrollerRef.current);\n          setIsScrolled(true);\n        }}\n        onScroll={async () => {\n          if (!firstRender) return;\n          await notifyWhenScrollingIsFinished(scrollerRef.current);\n          setIsScrolled(true);\n          setFirstRender(false);\n        }}\n      >\n        <div className=\"scroller-content\">\n          <ol>\n            {msgList.map((obj) => {\n              return (\n                <ChatMsg\n                  key={obj.msgId}\n                  content={obj}\n                  userList={userList}\n                  {...props}\n                />\n              );\n            })}\n          </ol>\n        </div>\n        <span ref={messagesEndRef}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatDisplay;\n\nfunction notifyWhenScrollingIsFinished(el) {\n  return new Promise((resolve) => {\n    requestAnimationFrame(check);\n    let sameFrame = 0;\n\n    function check() {\n      if (el.scrollHeight - el.offsetHeight - el.scrollTop < 50) {\n        if (sameFrame++ > 10) return resolve();\n\n        requestAnimationFrame(check);\n      }\n    }\n  });\n}\n\nChatDisplay.propTypes = {\n  roomID: PropTypes.string,\n  msgList: PropTypes.arrayOf(PropTypes.object),\n  userList: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n","import React from 'react';\nimport IconBtn from '../IconBtn';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/ReplyBar.css';\n\nimport closeBtn from '../../assets/svg/close-circle-fill.svg';\n\nconst ReplyBar = ({ displayName, close }) => {\n  return (\n    <div className=\"reply-bar\">\n      <div className=\"container\">\n        <div>\n          <div className=\"content\">\n            Replying to{' '}\n            <span className=\"display-name\">{displayName}</span>\n          </div>\n        </div>\n        <div className=\"actions btn-ctn\">\n          <IconBtn\n            onClick={close}\n            svg={closeBtn}\n            className=\"close-btn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyBar;\n\nReplyBar.propTypes = {\n  displayName: PropTypes.string,\n  close: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/MentionsPopup.css';\n\nconst MentionsPopup = ({ children }) => {\n  return (\n    <div className=\"mentions-popup\">\n      <div className=\"suggestions-wrapper\">\n        <header>\n          <h3>Members</h3>\n        </header>\n        {children.length > 0 ? (\n          <ul>{children}</ul>\n        ) : (\n          <div className=\"text-wrapper\">\n            <span>No users match</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MentionsPopup;\n\nMentionsPopup.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n};\n","import React, { useState, useMemo, useContext } from 'react';\nimport { EditorState, ContentState, convertToRaw } from 'draft-js';\nimport Editor from '@draft-js-plugins/editor';\nimport createMentionPlugin from '@draft-js-plugins/mention';\nimport PropTypes from 'prop-types';\n\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport UserDisplay from '../OnlineUsers/UserDisplay';\nimport MentionsPopup from './MentionsPopup';\nimport MentionWrapper from './MentionWrapper';\n\nconst ChatBarInput = ({\n  chatBarInputRef,\n  roomName,\n  userList,\n  replyTo,\n  setReplyTo,\n  isAttachments,\n  getAttachmentsURL,\n  cleanUpAttachments,\n  submit,\n}) => {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty(),\n  );\n\n  const [isMentionPopup, setIsMentionPopup] = useState(false);\n  const [suggestions, setSuggestions] = useState(userList);\n  const { setError } = useContext(ErrorContext);\n\n  const { MentionSuggestions, plugins } = useMemo(() => {\n    const mentionPlugin = createMentionPlugin({\n      mentionComponent: MentionWrapper,\n    });\n    // eslint-disable-next-line no-shadow\n    const { MentionSuggestions } = mentionPlugin;\n    // eslint-disable-next-line no-shadow\n    const plugins = [mentionPlugin];\n    return { plugins, MentionSuggestions };\n  }, []);\n\n  function onChange(editorState) {\n    setEditorState(editorState);\n  }\n\n  function onOpenChange(isOpen) {\n    setIsMentionPopup(isOpen);\n  }\n\n  function onQueryChange({ value }) {\n    setSuggestions(queryUserList(value));\n\n    function queryUserList(query) {\n      return userList\n        .sort((a, b) => {\n          if (a.displayName === b.displayName) return 0;\n          return a.displayName > b.displayName ? 1 : -1;\n        })\n        .filter((u) => u.displayName?.includes(query)) // bug in firebase where\n        .filter((obj, i) => i < 5);\n    }\n  }\n\n  function keyBindingFn(e) {\n    switch (e.key) {\n      case 'Enter':\n        return 'msg-submit';\n      default:\n    }\n  }\n\n  function handleKeyCmd(cmd) {\n    switch (cmd) {\n      case 'msg-submit':\n        onMsgSubmit();\n        break;\n      default:\n    }\n\n    async function onMsgSubmit() {\n      const replyToMsgID = replyTo ? replyTo.msgID : null;\n\n      const raw = convertToRaw(editorState.getCurrentContent());\n\n      const mentionArr = [];\n      fillMentionArr();\n      function fillMentionArr() {\n        for (const key in raw.entityMap) {\n          mentionArr.push({\n            uid: raw.entityMap[key].data.mention.uid,\n          });\n        }\n\n        Object.keys(raw.blocks[0].entityRanges).forEach((key, i) => {\n          mentionArr[i] = {\n            ...mentionArr[i],\n            range: raw.blocks[0].entityRanges[i],\n            // the range of indexes the mention belongs in, need to parse later as the msg replaces all mentions with the string 'undefined'\n          };\n        });\n      }\n\n      const msg = raw.blocks[0].text;\n\n      try {\n        if (!isAttachments && !msg) return;\n        let attachmentsURL;\n        if (isAttachments) attachmentsURL = await getAttachmentsURL();\n        await submit(msg, replyToMsgID, mentionArr, attachmentsURL);\n        cleanUpAttachments();\n        setReplyTo();\n\n        // clear draftjs input\n        const newEditorState = EditorState.push(\n          editorState,\n          ContentState.createFromText(''),\n        );\n        const currentState = editorState.getSelection();\n        const newEditorWithCurrentState = EditorState.forceSelection(\n          newEditorState,\n          currentState,\n        );\n        setEditorState(newEditorWithCurrentState);\n      } catch (error) {\n        setError(error.message);\n      }\n    }\n  }\n  return (\n    <div className=\"input-wrapper\">\n      <Editor\n        ref={chatBarInputRef}\n        editorKey={'editor'}\n        editorState={editorState}\n        onChange={onChange}\n        plugins={plugins}\n        keyBindingFn={keyBindingFn}\n        handleKeyCommand={handleKeyCmd}\n        placeholder={`message ${roomName}`}\n      />\n      <MentionSuggestions\n        open={isMentionPopup}\n        onOpenChange={onOpenChange}\n        entryComponent={UserDisplay}\n        popoverContainer={MentionsPopup}\n        suggestions={suggestions}\n        onSearchChange={onQueryChange}\n        renderEmptyPopup={true}\n      />\n    </div>\n  );\n};\n\nexport default ChatBarInput;\n\nChatBarInput.propTypes = {\n  chatBarInputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.object,\n  ]),\n  roomName: PropTypes.string,\n  userList: PropTypes.arrayOf(\n    PropTypes.shape({\n      displayName: PropTypes.string,\n    }),\n  ),\n  replyTo: PropTypes.objectOf(PropTypes.string),\n  setReplyTo: PropTypes.func,\n  isAttachments: PropTypes.bool,\n  getAttachmentsURL: PropTypes.func,\n  cleanUpAttachments: PropTypes.func,\n  submit: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AttachmentWrapper from '../Upload/AttachmentWrapper';\nimport ChatBarInput from './ChatBarInput';\nimport UploadFile from '../Upload/UploadFile';\n\nimport addCircleSvg from '../../assets/svg/add-circle-fill.svg';\n\nimport '../../styles/MentionsPopup.css';\nimport 'draft-js/dist/Draft.css';\n\nconst ChatBar = ({\n  replyTo,\n  attachments,\n  handleNewAttachments,\n  removeAttachment,\n  ...props\n}) => {\n  const style = replyTo\n    ? { borderTopLeftRadius: 0, borderTopRightRadius: 0 }\n    : { borderTopLeftRadius: '8px', borderTopRightRadius: '8px' };\n  return (\n    <div className=\"chatbar-content\" style={style}>\n      <div className=\"chatbar-wrapper\">\n        <div className=\"add-wrapper\">\n          <UploadFile\n            handleFile={handleNewAttachments}\n            actionOnChange=\"set attachment\"\n          >\n            <div className=\"icon-btn\">\n              <img src={addCircleSvg} alt=\"upload a file\" />\n            </div>\n          </UploadFile>\n        </div>\n        <ChatBarInput\n          replyTo={replyTo}\n          isAttachments={attachments.length > 0}\n          {...props}\n        />\n      </div>\n      {attachments.length > 0 && (\n        <div className=\"attachments-ctn\">\n          {attachments.map((f, idx) => {\n            return (\n              <AttachmentWrapper\n                key={idx}\n                name={f.name}\n                cancel={() => removeAttachment(f)}\n              />\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBar;\n\nChatBar.propTypes = {\n  replyTo: PropTypes.objectOf(PropTypes.string),\n  attachments: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  ),\n  handleNewAttachments: PropTypes.func,\n  removeAttachment: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport IconBtn from '../IconBtn';\n\nimport closeSVG from '../../assets/svg/close-circle-fill.svg';\n\nimport '../../styles/UploadProgress.css';\n\nconst UploadProgressWrapper = ({ task, cancel }) => {\n  return (\n    <div className=\"upload-progress-wrapper\">\n      <div className=\"content\">\n        Uploading <span className=\"text-wrapper\">{task.name}</span>\n        <span className=\"progress-wrapper\">{task.progress}%</span>\n      </div>\n\n      <div className=\"actions\">\n        <IconBtn svg={closeSVG} onClick={cancel} />\n      </div>\n    </div>\n  );\n};\n\nexport default UploadProgressWrapper;\n\nUploadProgressWrapper.propTypes = {\n  task: PropTypes.object,\n  cancel: PropTypes.func,\n};\n","import React, {\n  useState,\n  useLayoutEffect,\n  useRef,\n  useContext,\n} from 'react';\n\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport {\n  beginUpload,\n  listenToUploadProgress,\n} from '../../logic/channel_firebaseStuff';\nimport { getDownloadURL } from 'firebase/storage';\nimport uniqid from 'uniqid';\nimport PropTypes from 'prop-types';\n\nimport ReplyBar from './ReplyBar';\nimport ChatBar from './ChatBar';\nimport UploadProgressWrapper from '../Upload/UploadProgressWrapper';\n\nimport '../../styles/ChatBar.css';\n\nconst ChatBarWrapper = ({ replyTo, setReplyTo, ...props }) => {\n  const { setError } = useContext(ErrorContext);\n  const [attachments, setAttachments] = useState([]);\n  const [uploadTasks, setUploadTasks] = useState([]);\n  const uploadTasksCtnRef = useRef();\n\n  useLayoutEffect(function positionUploadTasksCtn() {\n    uploadTasksCtnRef.current.style.top = `-${\n      uploadTasksCtnRef.current.offsetHeight + 10\n    }px`;\n  });\n\n  function handleAttachmentsOnSubmitMsg() {\n    if (attachments.length === 0) return;\n    const copy = [...attachments];\n    setAttachments([]);\n    return Promise.all(\n      copy.map(async (f) => {\n        const task = beginUpload(f);\n        const id = uniqid();\n        setUploadTasks((prev) => [\n          ...prev,\n          {\n            id,\n            task,\n            name: f.name,\n            progress: f.progress,\n          },\n        ]);\n        listenToUploadProgress(task, function setProgress(progress) {\n          setUploadTasks((prev) =>\n            prev.map((t) => {\n              if (t.id === id) return { ...t, progress };\n              return t;\n            }),\n          );\n        });\n        await task;\n        const fileURL = await getDownloadURL(task.snapshot.ref);\n\n        return {\n          name: f.name,\n          url: fileURL,\n        };\n      }),\n    );\n  }\n  function handleNewAttachments(file) {\n    if (attachments.length === 5)\n      return setError(\"Woooaa, that's a lot of files there bud\");\n    setAttachments((prev) => [...prev, file]);\n  }\n  function removeAttachment(file) {\n    setAttachments((prev) => prev.filter((val) => val !== file));\n  }\n  return (\n    <form\n      className=\"chat-bar\"\n      name=\"chat-bar\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"upload-tasks-ctn\" ref={uploadTasksCtnRef}>\n        {uploadTasks.map((t, idx) => {\n          return <UploadProgressWrapper key={idx} task={t} />;\n        })}\n      </div>\n      {replyTo && (\n        <ReplyBar\n          displayName={replyTo.displayName}\n          close={() => setReplyTo()}\n        />\n      )}\n      <ChatBar\n        replyTo={replyTo}\n        attachments={attachments}\n        handleNewAttachments={handleNewAttachments}\n        removeAttachment={removeAttachment}\n        setReplyTo={setReplyTo}\n        getAttachmentsURL={handleAttachmentsOnSubmitMsg}\n        cleanUpAttachments={() => setUploadTasks([])}\n        {...props}\n      />\n    </form>\n  );\n};\n\nexport default ChatBarWrapper;\n\nfunction submitHandler(e) {\n  e.preventDefault();\n}\n\nChatBarWrapper.propTypes = {\n  replyTo: PropTypes.objectOf(PropTypes.string),\n  setReplyTo: PropTypes.func,\n};\n","import React, { useState, useContext, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { subscribeToChannel } from '../../logic/user_firebaseStuff';\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport ChatDisplay from './ChatDisplay';\nimport ChatBarWrapper from './ChatBarWrapper';\nimport FlatBtn from '../FlatBtn';\n\nconst ChatWrapper = ({\n  room,\n  msgList,\n  userList,\n  submitMsg,\n  isVisitor,\n}) => {\n  const { user } = useContext(UserContext);\n  const { setError } = useContext(ErrorContext);\n  const { channelID } = useParams();\n  const [replyTo, setReplyTo] = useState();\n  const chatBarInputRef = useRef();\n\n  function onReplyTo(displayName, msgID) {\n    setReplyTo({ displayName, msgID });\n    chatBarInputRef.current.focus();\n  }\n\n  async function onSubscribe() {\n    try {\n      await subscribeToChannel(user, channelID);\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  return (\n    <main id=\"chat\">\n      <ChatDisplay\n        roomID={room.id}\n        msgList={msgList}\n        userList={userList}\n        setReplyTo={setReplyTo}\n        onReplyTo={onReplyTo}\n      />\n      {!isVisitor ? (\n        <ChatBarWrapper\n          userList={userList}\n          submit={submitMsg}\n          roomName={room.name}\n          replyTo={replyTo}\n          setReplyTo={setReplyTo}\n          chatBarInputRef={chatBarInputRef}\n        />\n      ) : (\n        <div className=\"subscribe-banner\">\n          <FlatBtn\n            className=\"filler\"\n            text=\"Subscribe\"\n            onClick={onSubscribe}\n          />\n          to this channel to chat\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default ChatWrapper;\n\nChatWrapper.propTypes = {\n  room: PropTypes.objectOf(PropTypes.string),\n  msgList: PropTypes.arrayOf(PropTypes.object),\n  userList: PropTypes.arrayOf(PropTypes.object),\n  submitMsg: PropTypes.func,\n  isVisitor: PropTypes.bool,\n};\n","export default __webpack_public_path__ + \"static/media/menu-fill.1583b894.svg\";","export default __webpack_public_path__ + \"static/media/user-3-fill.173d960e.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/TopBar.css';\n\nimport menuSVG from '../assets/svg/menu-fill.svg';\nimport userSVG from '../assets/svg/user-3-fill.svg';\nimport IconBtn from './IconBtn';\n\nconst TopBar = ({ room, isMobile, showUserList, showNav }) => {\n  return (\n    <section className={isMobile ? 'top-bar mobile' : 'top-bar'}>\n      {room && (\n        <header>\n          {isMobile && (\n            <nav>\n              <IconBtn svg={menuSVG} onClick={showNav} />\n            </nav>\n          )}\n          <div className=\"room-name-wrapper\">{room.name}</div>\n        </header>\n      )}\n      <div className=\"toolbar\">\n        {room && (\n          <div className=\"channel-functions\">\n            {isMobile && (\n              <IconBtn svg={userSVG} onClick={showUserList} />\n            )}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default TopBar;\n\nTopBar.propTypes = {\n  room: PropTypes.object,\n  showUserList: PropTypes.func,\n  showNav: PropTypes.func,\n  isMobile: PropTypes.bool,\n};\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/OnlineUsers.css';\nimport CatList from '../CatList';\nimport UserDisplay from './UserDisplay';\nimport useUserCountStrs from '../../logic/custom-hooks/useUserCountStrs';\n\nconst OnlineUsers = ({ list, roles }) => {\n  roles = roles || [];\n\n  const rolesRef = useRef({});\n\n  const userCountStrs = useUserCountStrs(list, roles, rolesRef);\n\n  return (\n    <aside className=\"users-ctn\">\n      {roles.map((role, i) => {\n        return (\n          // each UserRole is given a ref in the rolesRef.current object\n          <CatList\n            key={i}\n            catRef={(el) => (rolesRef.current[role] = el)}\n            cat={role}\n            headerSubtext={userCountStrs[role]}\n            className=\"role-users-wrapper\"\n          >\n            {list\n              .filter((user) => {\n                if (user.role === role) return true;\n                if (!user.role && role === 'Online') return true;\n                return false;\n              })\n              .map((user) => (\n                <UserDisplay key={user.uid} user={user} />\n              ))}\n          </CatList>\n        );\n      })}\n    </aside>\n  );\n};\n\nexport default OnlineUsers;\n\nOnlineUsers.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n  roles: PropTypes.arrayOf(PropTypes.string),\n};\n","import { useState, useEffect } from 'react';\n\nexport default function useUserCountStrs(list, roles, rolesRef) {\n  const [userCountStrs, setUserCountStrs] = useState({});\n  useEffect(() => {\n    roles.forEach((role) => {\n      if (!rolesRef) return;\n\n      const userCount = list.filter((user) => {\n        if (role === 'Online') return !user.role;\n        return user.role === role;\n      }).length;\n\n      userCount === 0\n        ? rolesRef.current[role].classList.add('hidden')\n        : rolesRef.current[role].classList.remove('hidden');\n\n      setUserCountStrs((prev) => ({\n        ...prev,\n        [role]: ` - ${userCount}`,\n      }));\n    });\n  }, [roles, rolesRef, list]);\n\n  return userCountStrs;\n}\n","import React, {\n  useRef,\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useInputValues from '../../../logic/custom-hooks/useInputValues';\nimport {\n  updateRoomName,\n  updateCategoryOfRoom,\n  createRoomCategory,\n} from '../../../logic/channel_firebaseStuff';\nimport { ChannelContext } from '../../../logic/contexts/ChannelContext';\nimport { ErrorContext } from '../../../logic/contexts/ErrorContext';\nimport useSuccess from '../../../logic/custom-hooks/useSuccess';\n\nimport FlatBtn from '../../FlatBtn';\nimport InputField from '../../InputField';\nimport Success from '../../Success';\n\nimport '../../../styles/RoomOverview.css';\n\nconst RoomOverview = ({ room }) => {\n  const { channelID } = useParams();\n  const { roomCategories } = useContext(ChannelContext);\n  const { setError } = useContext(ErrorContext);\n\n  const { inputValues, setInputValues, handleChange } =\n    useInputValues({\n      room_name: room.name,\n      room_category: room.category,\n    });\n  useEffect(() => {\n    setInputValues({\n      room_name: room.name,\n      room_category: room.category,\n    });\n  }, [room, setInputValues]);\n\n  const isMounted = useRef();\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  const { success, setSuccess } = useSuccess(isMounted);\n  const [isSaving, setIsSaving] = useState(false);\n  return (\n    <>\n      {success && <Success text={success} />}\n      <section className=\"room_overview\">\n        <header>\n          <h2>Overview</h2>\n        </header>\n        <div className=\"inner-content\">\n          <form\n            className=\"fields-ctn\"\n            onSubmit={async (e) => {\n              e.preventDefault();\n              try {\n                setIsSaving(true);\n                const {\n                  room_Name: roomName,\n                  room_Category: roomCategory,\n                } = inputValues;\n                if (roomName !== room.name)\n                  await updateRoomName(channelID, room.id, roomName);\n\n                if (roomCategory === room.category) return;\n\n                if (roomCategories.indexOf(roomCategory) === -1)\n                  await createRoomCategory(channelID, roomCategory);\n                await updateCategoryOfRoom(\n                  channelID,\n                  room.id,\n                  roomCategory,\n                );\n\n                if (isMounted.current) {\n                  setIsSaving(false);\n                  setSuccess('changes saved');\n                }\n              } catch (error) {\n                setError(error.message);\n              }\n            }}\n          >\n            <InputField\n              label={'room name'}\n              name=\"room_name\"\n              onChange={handleChange}\n              value={inputValues.room_name}\n            />\n            <InputField\n              label={'room category'}\n              name=\"room_category\"\n              onChange={handleChange}\n              value={inputValues.room_category}\n            />\n            <div className=\"btn-ctn\">\n              <FlatBtn\n                className=\"filled\"\n                text=\"Save changes\"\n                type=\"submit\"\n                loading={isSaving}\n              />\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default RoomOverview;\n\nRoomOverview.propTypes = {\n  room: PropTypes.object,\n};\n","import React, { useContext, useReducer } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ErrorContext } from '../../../logic/contexts/ErrorContext';\nimport { deleteRoom } from '../../../logic/channel_firebaseStuff';\nimport useMobileCheck from '../../../logic/custom-hooks/useMobileCheck';\n\nimport RoomOverview from './RoomOverview';\nimport Error from '../../Error';\nimport Import from '../../../logic/Import';\n\nconst RoomSettings = ({ room, close }) => {\n  const { SetError } = useContext(ErrorContext);\n  const { channelID, roomID } = useParams();\n  const {\n    isMobileCheck: { current: isMobile },\n  } = useMobileCheck();\n\n  const [state, dispatch] = useReducer((state, action) => {\n    if (action.type === 'swap_to') {\n      switch (action.payload) {\n        case 'overview':\n          return 'overview';\n        case 'delete room':\n          (async function () {\n            try {\n              await deleteRoom(channelID, roomID);\n              close();\n            } catch (error) {\n              SetError(error.message);\n            }\n          })();\n          break;\n        default:\n          throw new Error(\"that doesn't exist!\");\n      }\n    }\n  }, 'overview');\n\n  return (\n    <Import\n      mobile={() => import('../Settings _mobile')}\n      desktop={() => import('../Settings_desktop')}\n      isMobile={isMobile}\n    >\n      {(Settings) => (\n        <Settings\n          close={close}\n          categories={[`${room.name}`, 'none']}\n          btnList={[\n            createSettingsButtonDetails(\n              'overview',\n              `${room.name}`,\n              true,\n            ),\n            createSettingsButtonDetails('delete room', 'none'),\n          ]}\n          dispatch={dispatch}\n        >\n          {state &&\n            {\n              overview: <RoomOverview room={room} />,\n            }[state]}\n        </Settings>\n      )}\n    </Import>\n  );\n};\n\nexport default RoomSettings;\n\nfunction createSettingsButtonDetails(text, category, isDefault) {\n  return {\n    text,\n    category,\n    isDefault,\n  };\n}\n\nRoomSettings.propTypes = {\n  room: PropTypes.object,\n  close: PropTypes.func,\n};\n"],"sourceRoot":""}