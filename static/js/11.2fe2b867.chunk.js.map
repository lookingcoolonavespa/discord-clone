{"version":3,"sources":["logic/custom-hooks/useTouchEvents.js","components/MobileSidebar.js","components/Settings/Settings _mobile.js"],"names":["useTouchEvents","onRightSwipe","onLeftSwipe","useState","touchStart","setTouchStart","isMoved","setIsMoved","touchEnd","setTouchEnd","handleTouchStart","e","targetTouches","clientX","handleTouchMove","handleTouchEnd","console","log","MobileSidebar","isVisible","isLeft","className","children","hide","defaultClassName","contentRef","useRef","useTransition","key","item","from","transform","enter","leave","expires","transitions","styles","t","i","div","onClick","ref","stopPropagation","target","closest","style","Settings","close","props","showSidebar","setShowSidebar","closeSidebar","useCallback","openSidebar","ReactDOM","createPortal","onTouchEnd","onTouchMove","onTouchStart","svg","closeSVG","document","querySelector"],"mappings":"4KAEe,SAASA,EAAeC,EAAcC,GACnD,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAwBA,MAAO,CAAEC,iBAtBT,SAA0BC,GACxBN,EAAcM,EAAEC,cAAc,GAAGC,UAqBRC,gBAnB3B,SAAyBH,GACvBJ,GAAW,GACXE,EAAYE,EAAEC,cAAc,GAAGC,UAiBWE,eAf5C,WACMT,IACFU,QAAQC,IAAIb,EAAYI,GACpBJ,EAAaI,EAAW,KAC1BP,GAAgBA,IAEdG,EAAaI,GAAY,KAC3BN,GAAeA,KAGnBO,EAAY,GACZJ,EAAc,GACdE,GAAW,O,iCC1Bf,2BA+DeW,IA3DO,SAAC,GAMhB,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACAC,EACI,EADJA,KAEMC,EAAmBJ,EAAS,eAAiB,gBAC7CK,EAAaC,mBAmBnB,OAlBoBC,wBAAcR,EAAW,CAC3CS,IAAK,SAACC,GAAD,OAAUA,GACfC,KAAM,CACJC,UAAWX,EACP,yBACA,yBAENY,MAAO,CACLD,UAAW,uBAEbE,MAAO,CACLF,UAAWX,EACP,yBACA,yBAGNc,QAAS,GAEJC,EAAY,SAACC,EAAQP,EAAMQ,EAAGC,GACnC,OACET,GACE,cAAC,WAASU,IAAV,CACElB,UACEA,EAAS,UACFA,EADE,YACWG,GADX,UAEFA,GAETgB,QAASjB,EANX,SAQE,cAAC,WAASgB,IAAV,CACElB,UAAU,kBACVoB,IAAKhB,EACLe,QAAS,SAAC7B,GACRA,EAAE+B,mBAEA/B,EAAEgC,OAAOC,QAAQ,OACjBjC,EAAEgC,OAAOC,QAAQ,YAEjBrB,KAEJsB,MAAOT,EAXT,SAaGd,W,gLCMEwB,UA/CE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOzB,EAAyB,EAAzBA,SAAa0B,EAAY,iBAClD,EAAsC7C,oBAAS,GAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KAEMC,EAAeC,uBAAY,WAC/BF,GAAe,KACd,IACGG,EAAcD,uBAAY,WAC9BF,GAAe,KACd,IACH,EACElD,YAAemD,EAAcE,GADvB3C,EAAR,EAAQA,iBAAkBI,EAA1B,EAA0BA,gBAAiBC,EAA3C,EAA2CA,eAE3C,OAAOuC,IAASC,aACd,sBACElC,UAAU,kBACVmC,WAAYzC,EACZ0C,YAAa3C,EACb4C,aAAchD,EAJhB,UAME,cAAC,IAAD,CACEU,QAAQ,EACRC,UAAU,iBACVE,KAAM4B,EACNhC,UAAW8B,EAJb,SAME,qBAAK5B,UAAU,mBAAf,SACE,cAAC,IAAD,eAAa2B,QAGjB,qBAAK3B,UAAU,iBAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,sBAAMA,UAAU,UAAhB,SAA2BC,IAC3B,qBAAKD,UAAU,UAAf,SACE,cAAC,IAAD,CACEsC,IAAKC,IACLpB,QAASO,EACT1B,UAAW,0BAOvBwC,SAASC,cAAc","file":"static/js/11.2fe2b867.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function useTouchEvents(onRightSwipe, onLeftSwipe) {\n  const [touchStart, setTouchStart] = useState(0);\n  const [isMoved, setIsMoved] = useState(false);\n  const [touchEnd, setTouchEnd] = useState(0);\n\n  function handleTouchStart(e) {\n    setTouchStart(e.targetTouches[0].clientX);\n  }\n  function handleTouchMove(e) {\n    setIsMoved(true);\n    setTouchEnd(e.targetTouches[0].clientX);\n  }\n  function handleTouchEnd() {\n    if (isMoved) {\n      console.log(touchStart, touchEnd);\n      if (touchStart - touchEnd > 150) {\n        onRightSwipe && onRightSwipe();\n      }\n      if (touchStart - touchEnd < -150) {\n        onLeftSwipe && onLeftSwipe();\n      }\n    }\n    setTouchEnd(0);\n    setTouchStart(0);\n    setIsMoved(false);\n  }\n\n  return { handleTouchStart, handleTouchMove, handleTouchEnd };\n}\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTransition, animated } from 'react-spring';\n\nconst MobileSidebar = ({\n  isVisible,\n  isLeft,\n  className,\n  children,\n  hide,\n}) => {\n  const defaultClassName = isLeft ? 'left-sidebar' : 'right-sidebar';\n  const contentRef = useRef();\n  const transitions = useTransition(isVisible, {\n    key: (item) => item,\n    from: {\n      transform: isLeft\n        ? 'translate3d(-100%,0,0)'\n        : 'translate3d(100%,0,0)',\n    },\n    enter: {\n      transform: 'translate3d(0%,0,0)',\n    },\n    leave: {\n      transform: isLeft\n        ? 'translate3d(-100%,0,0)'\n        : 'translate3d(100%,0,0)',\n    },\n    // key: true,\n    expires: 0,\n  });\n  return transitions((styles, item, t, i) => {\n    return (\n      item && (\n        <animated.div\n          className={\n            className\n              ? `${className} ${defaultClassName}`\n              : `${defaultClassName}`\n          }\n          onClick={hide}\n        >\n          <animated.div\n            className=\"content-wrapper\"\n            ref={contentRef}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (\n                e.target.closest('li') ||\n                e.target.closest('button')\n              )\n                hide();\n            }}\n            style={styles}\n          >\n            {children}\n          </animated.div>\n        </animated.div>\n      )\n    );\n  });\n};\n\nexport default MobileSidebar;\n\nMobileSidebar.propTypes = {\n  isVisible: PropTypes.bool,\n  isLeft: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]),\n  hide: PropTypes.func,\n};\n","import React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport useTouchEvents from '../../logic/custom-hooks/useTouchEvents';\n\nimport Sidebar from './Sidebar';\nimport IconBtn from '../IconBtn';\nimport MobileSidebar from '../MobileSidebar';\n\nimport closeSVG from '../../assets/svg/close-line.svg';\n\nimport '../../styles/Settings.css';\n\nconst Settings = ({ close, children, ...props }) => {\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  const closeSidebar = useCallback(() => {\n    setShowSidebar(false);\n  }, []);\n  const openSidebar = useCallback(() => {\n    setShowSidebar(true);\n  }, []);\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } =\n    useTouchEvents(closeSidebar, openSidebar);\n  return ReactDOM.createPortal(\n    <div\n      className=\"settings mobile\"\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <MobileSidebar\n        isLeft={true}\n        className=\"sidebar-region\"\n        hide={closeSidebar}\n        isVisible={showSidebar}\n      >\n        <div className=\"sidebar-scroller\">\n          <Sidebar {...props}></Sidebar>\n        </div>\n      </MobileSidebar>\n      <div className=\"content-region\">\n        <div className=\"content-transition-wrapper\">\n          <div className=\"content-scroller\">\n            <main className=\"content\">{children}</main>\n            <div className=\"actions\">\n              <IconBtn\n                svg={closeSVG}\n                onClick={close}\n                className={'close-btn'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.querySelector('body'),\n  );\n};\n\nexport default Settings;\n\nSettings.propTypes = {\n  close: PropTypes.func,\n  children: PropTypes.element,\n};\n"],"sourceRoot":""}