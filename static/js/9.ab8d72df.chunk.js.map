{"version":3,"sources":["logic/custom-hooks/useTouchEvents.js","components/MobileSidebar.js","components/Settings/Settings _mobile.js","components/UserInfo/UserInfo_mobile.js","components/MainNav/MainNav_mobile.js","components/UserInfo/MyAccount _mobile.js","components/UserInfo/UserSettings_mobile.js","components/ChannelNav/ChannelNav_mobile.js","components/ChannelView_mobile.js"],"names":["useTouchEvents","onRightSwipe","onLeftSwipe","useState","touchStart","setTouchStart","isMoved","setIsMoved","touchEnd","setTouchEnd","handleTouchStart","e","targetTouches","clientX","handleTouchMove","handleTouchEnd","MobileSidebar","isVisible","isLeft","className","children","hide","defaultClassName","contentRef","useRef","useTransition","key","item","from","transform","enter","leave","expires","transitions","styles","t","i","div","onClick","ref","stopPropagation","target","closest","style","Settings","close","props","showSidebar","setShowSidebar","closeSidebar","useCallback","openSidebar","ReactDOM","createPortal","onTouchEnd","onTouchMove","onTouchStart","svg","closeSVG","document","querySelector","UserInfo","showSettings","user","useContext","UserContext","img","photoURL","color","displayName","settingsSVG","MainNav","beginCreateChannel","isCreateChannel","visitingChannel","history","useHistory","id","plusSVG","active","tooltipText","compassSVG","location","pathname","includes","push","MyAccount","setUser","setError","ErrorContext","channelList","popupDetails","setPopupDetails","useInputValues","inputValues","handleChange","resetInputValues","editUsername","title","subheader","fields","label","name","type","inputsToSubmit","updateUsername","a","updateUserInfo","new_username","editEmail","updateEmail","new_email","editPassword","updatePassword","new_password","deleteAcc","actionBtnText","cleanUp","deleteUser","removeUser","getSubmitAction","Field","display","email","Divider","PasswordSection","AccountRemoval","Modal","Popup","submitAction","isMobile","UserSettings","SetError","useReducer","state","action","payload","onLogout","logout","message","Error","dispatch","categories","btnList","createSettingsButtonDetails","editProfile","UserProfile","text","category","ChannelNav","channel","list","showUserSettings","showCreateRoom","mentioned","userRole","ChannelContext","src","addSVG","alt","map","CatList","cat","isHeader","filter","room","mentionCount","Object","keys","length","RoomLink","ChannelView","finishLoading","useParams","channelID","roomID","setChannel","setRoom","updateChannel","icon","useOnChannelEnter","roleList","roomCategories","roomList","userList","onlineUsers","updateRoom","useOnRoomEnter","msgList","submitMsg","showLeftSidebar","setShowLeftSidebar","showRightSidebar","setShowRightSidebar","setShowUserSettings","setIsCreateChannel","isCreateRoom","setIsCreateRoom","newRoomInfo","createRoom","room_name","room_category","indexOf","createRoomCategory","editRoomInfo","setEditRoomInfo","Provider","value","RoomSettings","CreateChannel","currentRoom","TopBar","ChatWrapper","isVisitor","OnlineUsers","roles"],"mappings":"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","file":"static/js/9.ab8d72df.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function useTouchEvents(onRightSwipe, onLeftSwipe) {\n  const [touchStart, setTouchStart] = useState(0);\n  const [isMoved, setIsMoved] = useState(false);\n  const [touchEnd, setTouchEnd] = useState(0);\n\n  function handleTouchStart(e) {\n    setTouchStart(e.targetTouches[0].clientX);\n  }\n  function handleTouchMove(e) {\n    setIsMoved(true);\n    setTouchEnd(e.targetTouches[0].clientX);\n  }\n  function handleTouchEnd() {\n    if (isMoved) {\n      if (touchStart - touchEnd > 150) {\n        onRightSwipe && onRightSwipe();\n      }\n      if (touchStart - touchEnd < 150) {\n        onLeftSwipe && onLeftSwipe();\n      }\n    }\n    setTouchEnd(0);\n    setTouchStart(0);\n    setIsMoved(false);\n  }\n\n  return { handleTouchStart, handleTouchMove, handleTouchEnd };\n}\n","import React, { useRef } from 'react';\nimport { useTransition, animated } from 'react-spring';\n\nconst MobileSidebar = ({ isVisible, isLeft, className, children, hide }) => {\n  const defaultClassName = isLeft ? 'left-sidebar' : 'right-sidebar';\n  const contentRef = useRef();\n  const transitions = useTransition(isVisible, {\n    key: (item) => item,\n    from: {\n      transform: isLeft ? 'translate3d(-100%,0,0)' : 'translate3d(100%,0,0)',\n    },\n    enter: {\n      transform: 'translate3d(0%,0,0)',\n    },\n    leave: {\n      transform: isLeft ? 'translate3d(-100%,0,0)' : 'translate3d(100%,0,0)',\n    },\n    // key: true,\n    expires: 0,\n  });\n  return transitions((styles, item, t, i) => {\n    return (\n      item && (\n        <animated.div\n          className={\n            className\n              ? `${className} ${defaultClassName}`\n              : `${defaultClassName}`\n          }\n          onClick={hide}\n        >\n          <animated.div\n            className=\"content-wrapper\"\n            ref={contentRef}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (e.target.closest('li') || e.target.closest('button')) hide();\n            }}\n            style={styles}\n          >\n            {children}\n          </animated.div>\n        </animated.div>\n      )\n    );\n  });\n};\n\nexport default MobileSidebar;\n","import React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport useTouchEvents from '../../logic/custom-hooks/useTouchEvents';\n\nimport Sidebar from './Sidebar';\nimport IconBtn from '../IconBtn';\nimport MobileSidebar from '../MobileSidebar';\n\nimport closeSVG from '../../assets/svg/close-line.svg';\n\nimport '../../styles/Settings.css';\n\nconst Settings = ({ close, children, ...props }) => {\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  const closeSidebar = useCallback(() => {\n    setShowSidebar(false);\n  }, []);\n  const openSidebar = useCallback(() => {\n    setShowSidebar(true);\n  }, []);\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } = useTouchEvents(\n    closeSidebar,\n    openSidebar\n  );\n  return ReactDOM.createPortal(\n    <div\n      className=\"settings mobile\"\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <MobileSidebar\n        isLeft={true}\n        className=\"sidebar-region\"\n        hide={closeSidebar}\n        isVisible={showSidebar}\n      >\n        <div className=\"sidebar-scroller\">\n          <Sidebar {...props}></Sidebar>\n        </div>\n      </MobileSidebar>\n      <div className=\"content-region\">\n        <div className=\"content-transition-wrapper\">\n          <div className=\"content-scroller\">\n            <main className=\"content\">{children}</main>\n            <div className=\"actions\">\n              <IconBtn svg={closeSVG} onClick={close} className={'close-btn'} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.querySelector('body')\n  );\n};\n\nexport default Settings;\n","import React, { useContext } from 'react';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\n\nimport Avatar from '../Avatar';\nimport IconBtn from '../IconBtn';\n\nimport '../../styles/UserInfo.css';\nimport settingsSVG from '../../assets/svg/settings-3-fill.svg';\n\nconst UserInfo = ({ showSettings }) => {\n  const { user } = useContext(UserContext);\n  return (\n    <section className=\"user-info-panel\">\n      <div className=\"ctn\">\n        <Avatar img={user.photoURL} color={user.color} />\n        <div className=\"name-tag\">\n          <div className=\"username-wrapper\">{user.displayName}</div>\n        </div>\n        <div className=\"btn-ctn\">\n          <IconBtn svg={settingsSVG} onClick={showSettings} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default UserInfo;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ChannelList from './ChannelList';\n\nimport '../../styles/MainNav.css';\nimport ChannelListHeader from './ChannelListHeader';\nimport MainNavBtn from './MainNavBtn';\nimport CreateChannel from '../CreateChannel/CreateChannel';\n\nimport plusSVG from '../../assets/svg/add-line.svg';\nimport compassSVG from '../../assets/svg/compass-3-fill.svg';\n\nconst MainNav = ({ beginCreateChannel, isCreateChannel, visitingChannel }) => {\n  const history = useHistory();\n  return (\n    <>\n      <nav id=\"main-nav\">\n        <ChannelListHeader visitingChannel={visitingChannel} />\n        <div className=\"scroller\">\n          <ChannelList />\n          <div className=\"btn-ctn\">\n            <MainNavBtn\n              svg={plusSVG}\n              active={isCreateChannel}\n              onClick={beginCreateChannel}\n              tooltipText={'Create a channel'}\n            />\n            {/* add a server */}\n            <MainNavBtn\n              svg={compassSVG}\n              active={history.location.pathname.includes('explore')}\n              onClick={() => history.push('/explore')}\n              tooltipText={'Explore public channels'}\n            />\n          </div>\n          {/* explore servers */}\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default MainNav;\n","import React, { useState, useCallback, useContext } from 'react';\n\nimport { updateUserInfo, removeUser } from '../../logic/user_firebaseStuff';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Field from '../Settings/Field';\nimport Divider from '../Settings/Divider';\nimport PasswordSection from './PasswordSection';\nimport AccountRemoval from './AccountRemoval';\nimport Modal from '../Modal';\nimport Popup from '../Popup';\n\nconst MyAccount = () => {\n  const { user, setUser } = useContext(UserContext);\n  const { setError } = useContext(ErrorContext);\n  const { channelList } = useContext(UserContext);\n\n  const [popupDetails, setPopupDetails] = useState();\n  const { inputValues, handleChange, resetInputValues } = useInputValues();\n\n  const editUsername = useCallback(() => {\n    setPopupDetails({\n      title: 'Change your username',\n      subheader: 'Enter a new username and your existing password',\n      fields: [\n        { label: 'username', name: 'new_username', type: 'text' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_username',\n    });\n  }, []);\n  const updateUsername = useCallback(async () => {\n    await updateUserInfo(\n      'displayName',\n      inputValues.new_username,\n      setUser,\n      channelList\n    );\n  }, [inputValues.new_username, setUser, channelList]);\n\n  const editEmail = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter a new email address and your existing password',\n      fields: [\n        { label: 'email', name: 'new_email', type: 'email' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_email',\n    });\n  }, []);\n  const updateEmail = useCallback(async () => {\n    await updateUserInfo('email', inputValues.new_email, setUser);\n  }, [inputValues.new_email, setUser]);\n\n  const editPassword = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter your current password and a new password',\n      fields: [\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n        { label: 'new password', name: 'new_password', type: 'password' },\n        {\n          label: 'confirm new password',\n          name: 'confirm_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_password',\n    });\n  }, []);\n  const updatePassword = useCallback(async () => {\n    await updateUserInfo('password', inputValues.new_password);\n  }, [inputValues.new_password]);\n\n  const deleteAcc = useCallback(() => {\n    setPopupDetails({\n      title: 'Delete Account',\n      subheader:\n        'Are you sure you want to delete your account? This will immediately log you out of your account and you will not be able to log in again. Forever.',\n      fields: [\n        {\n          label: 'password',\n          name: 'password',\n          type: 'password',\n        },\n      ],\n      actionBtnText: 'Delete Account',\n      inputsToSubmit: 'delete',\n      cleanUp: () => '', // need to feed a cleanup function to avoid state update on unmounted component\n    });\n  }, []);\n\n  const deleteUser = useCallback(\n    () => removeUser(channelList, setError),\n    [channelList, setError]\n  );\n\n  const getSubmitAction = useCallback(() => {\n    switch (\n      popupDetails?.inputsToSubmit //get submit action based which popupDetails is active\n    ) {\n      case 'new_username':\n        return updateUsername;\n      case 'new_email':\n        return updateEmail;\n      case 'new_password':\n        return updatePassword;\n      case 'delete':\n        return deleteUser;\n      default:\n        return;\n    }\n  }, [\n    updateUsername,\n    updatePassword,\n    updateEmail,\n    deleteUser,\n    popupDetails?.inputsToSubmit,\n  ]);\n\n  return (\n    <>\n      <section className=\"my_account\">\n        <header>\n          <h2>My Account</h2>\n        </header>\n        <div className=\"inner-content\">\n          <div className=\"field-list\">\n            <Field\n              item=\"username\"\n              display={user.displayName}\n              onClick={editUsername}\n            />\n            <Field item=\"email\" display={user.email} onClick={editEmail} />\n          </div>\n          <Divider />\n          <PasswordSection editPassword={editPassword} />\n          <Divider />\n          <AccountRemoval deleteAcc={deleteAcc} />\n        </div>\n      </section>\n      {popupDetails && (\n        <Modal\n          close={() => {\n            setPopupDetails();\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setPopupDetails();\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            {...popupDetails}\n            submitAction={getSubmitAction()}\n            isMobile={true}\n            inputValues={inputValues}\n            setError={setError}\n          ></Popup>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default MyAccount;\n","import React, { useState, useCallback, useContext, useReducer } from 'react';\n\nimport { logout } from '../../logic/user_firebaseStuff';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Settings from '../Settings/Settings _mobile';\nimport MyAccount from './MyAccount _mobile';\nimport UserProfile from './UserProfile';\nimport Error from '../Error';\n\nconst UserSettings = ({ close }) => {\n  const { SetError } = useContext(ErrorContext);\n  const [state, dispatch] = useReducer((state, action) => {\n    if (action.type === 'swap_to') {\n      switch (action.payload) {\n        case 'my account':\n          return 'my account';\n        case 'user profile':\n          return 'user profile';\n        case 'log out':\n          onLogout();\n          async function onLogout() {\n            try {\n              await logout();\n            } catch (error) {\n              SetError(error.message);\n            }\n          }\n          break;\n        default:\n          throw new Error(\"that doesn't exist!\");\n      }\n    }\n  }, 'my account');\n\n  return (\n    <Settings\n      close={close}\n      categories={['user settings', 'none']}\n      btnList={[\n        createSettingsButtonDetails('my account', 'user settings'),\n        createSettingsButtonDetails('user profile', 'user settings'),\n        createSettingsButtonDetails('log out', 'none'),\n      ]}\n      dispatch={dispatch}\n    >\n      {state &&\n        {\n          'my account': (\n            <MyAccount\n              editProfile={() =>\n                dispatch({ type: 'swap_to', payload: 'user profile' })\n              }\n            />\n          ),\n          'user profile': <UserProfile isMobile={true} />,\n        }[state]}\n    </Settings>\n  );\n};\n\nexport default UserSettings;\n\nfunction createSettingsButtonDetails(text, category) {\n  return {\n    text,\n    category,\n  };\n}\n","import React, { useContext } from 'react';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ChannelContext } from '../../logic/contexts/ChannelContext';\n\nimport UserInfo from '../UserInfo/UserInfo_mobile';\nimport CatList from '../CatList';\nimport RoomLink from './RoomLink';\n\nimport addSVG from '../../assets/svg/add-line.svg';\n\nimport '../../styles/ChannelNav.css';\n\nconst ChannelNav = ({\n  channel,\n  categories,\n  list,\n  showUserSettings,\n  showCreateRoom,\n}) => {\n  categories = categories || [];\n\n  const { mentioned } = useContext(UserContext);\n  const { userRole } = useContext(ChannelContext);\n\n  return (\n    <>\n      <nav className=\"channel-nav sidebar\">\n        <header>{channel.name}</header>\n        <div className=\"room-list\">\n          {userRole === 'owner' && (\n            <li className=\"room-link-item new_room-btn\">\n              <button className=\"content\" onClick={showCreateRoom}>\n                <img src={addSVG} alt=\"plus icon\" />\n                <span>Add new room</span>\n              </button>\n            </li>\n          )}\n          {categories.map((category, i) => (\n            <CatList\n              key={i}\n              cat={category}\n              isHeader={category === 'none' ? false : true}\n              className=\"category-room-wrapper\"\n            >\n              {list\n                .filter((room) => {\n                  if (room.category === category) return true;\n                  if (!room.category && category === 'none') return true;\n                  return false;\n                })\n                .map((room) => {\n                  const hasMentions = !!mentioned?.[channel.id]?.[room.id];\n                  let mentionCount;\n                  if (hasMentions)\n                    mentionCount = Object.keys(\n                      mentioned[channel.id][room.id]\n                    ).length;\n                  return (\n                    <RoomLink\n                      key={room.id}\n                      channel={channel}\n                      room={room}\n                      mentionCount={mentionCount}\n                    />\n                  );\n                })}\n            </CatList>\n          ))}\n        </div>\n        <UserInfo showSettings={showUserSettings} />\n      </nav>\n    </>\n  );\n};\n\nexport default ChannelNav;\n","import React, { useState, useCallback, useContext } from 'react';\nimport { useParams } from 'react-router';\n\nimport { UserContext } from '../logic/contexts/UserContext';\nimport useTouchEvents from '../logic/custom-hooks/useTouchEvents';\nimport useOnChannelEnter from '../logic/custom-hooks/useOnChannelEnter';\nimport useOnRoomEnter from '../logic/custom-hooks/useOnRoomEnter';\nimport { ChannelContext } from '../logic/contexts/ChannelContext';\nimport useInputValues from '../logic/custom-hooks/useInputValues';\nimport { createRoom, createRoomCategory } from '../logic/channel_firebaseStuff';\n\nimport ChannelNav from './ChannelNav/ChannelNav_mobile';\nimport UserSettings from './UserInfo/UserSettings_mobile';\nimport MobileSidebar from './MobileSidebar';\nimport OnlineUsers from './OnlineUsers/OnlineUsers';\nimport TopBar from './TopBar';\nimport ChatWrapper from './Chat/ChatWrapper';\nimport MainNav from './MainNav/MainNav_mobile';\nimport CreateChannel from './CreateChannel/CreateChannel';\nimport Modal from './Modal';\nimport Popup from './Popup';\nimport RoomSettings from './Settings/RoomSettings/RoomSettings';\n\nimport '../styles/ChannelView.css';\n\nconst ChannelView = ({ finishLoading, setError }) => {\n  const { user, channelList } = useContext(UserContext);\n  const { channelID, roomID } = useParams();\n  const [channel, setChannel] = useState({ id: channelID });\n  const [room, setRoom] = useState({ id: roomID });\n\n  const updateChannel = useCallback(\n    (name, icon) => setChannel({ name, icon, id: channelID }),\n    [channelID]\n  );\n  const {\n    visitingChannel,\n    roleList,\n    roomCategories,\n    roomList,\n    userList,\n    onlineUsers,\n    userRole,\n  } = useOnChannelEnter(user, channelID, channelList, updateChannel, setError);\n\n  // room stuff\n  const updateRoom = useCallback(\n    (name) => setRoom({ name, id: roomID }),\n    [roomID]\n  );\n  const { msgList, submitMsg } = useOnRoomEnter(\n    user,\n    channelID,\n    roomID,\n    updateRoom,\n    finishLoading,\n    setError\n  );\n\n  const [showLeftSidebar, setShowLeftSidebar] = useState(false);\n  const [showRightSidebar, setShowRightSidebar] = useState(false);\n  const onLeftSwipe = useCallback(() => {\n    if (!showLeftSidebar && !showRightSidebar) return setShowLeftSidebar(true);\n    if (showRightSidebar) return setShowRightSidebar(false);\n  }, [showLeftSidebar, showRightSidebar]);\n  const onRightSwipe = useCallback(() => {\n    if (showLeftSidebar) return setShowLeftSidebar(false);\n    if (!showRightSidebar) return setShowRightSidebar(true);\n  }, [showLeftSidebar, showRightSidebar]);\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } = useTouchEvents(\n    onRightSwipe,\n    onLeftSwipe\n  );\n\n  const [showUserSettings, setShowUserSettings] = useState(false);\n  const [isCreateChannel, setIsCreateChannel] = useState(false);\n\n  const [isCreateRoom, setIsCreateRoom] = useState(false);\n  const {\n    inputValues: newRoomInfo,\n    handleChange,\n    resetInputValues,\n  } = useInputValues();\n\n  async function onCreateRoom() {\n    await createRoom(\n      channel.id,\n      newRoomInfo.room_name,\n      newRoomInfo.room_category || null\n    );\n    if (roomCategories.indexOf(newRoomInfo.room_category) === -1) {\n      await createRoomCategory(channel.id, newRoomInfo.room_category);\n    }\n  }\n\n  const [editRoomInfo, setEditRoomInfo] = useState();\n\n  return (\n    <ChannelContext.Provider value={{ userRole }}>\n      {editRoomInfo && (\n        <RoomSettings room={editRoomInfo} close={() => setEditRoomInfo()} />\n      )}\n      {isCreateRoom && (\n        <Modal\n          close={() => {\n            setIsCreateRoom(false);\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setIsCreateRoom(false);\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            title=\"Create a new room\"\n            fields={[\n              { label: 'Room Name', name: 'room_name', type: 'text' },\n              {\n                label: 'Room Category',\n                name: 'room_category',\n                type: 'text',\n              },\n            ]}\n            submitAction={onCreateRoom}\n            setError={setError}\n            inputValues={newRoomInfo}\n          ></Popup>\n        </Modal>\n      )}\n      {isCreateChannel && (\n        <CreateChannel\n          isMobile={true}\n          close={() => setIsCreateChannel(false)}\n        />\n      )}\n      {showUserSettings ? (\n        <UserSettings close={() => setShowUserSettings(false)} />\n      ) : (\n        <div\n          className=\"channel-view\"\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        >\n          {channel && (\n            <MobileSidebar\n              isVisible={showLeftSidebar}\n              isLeft={true}\n              hide={() => setShowLeftSidebar(false)}\n            >\n              <MainNav\n                visitingChannel={visitingChannel}\n                beginCreateChannel={() => setIsCreateChannel(true)}\n                isCreateChannel={isCreateChannel}\n              />\n              <ChannelNav\n                channel={channel}\n                categories={roomCategories}\n                list={roomList}\n                setRoom={setRoom}\n                currentRoom={room}\n                showUserSettings={() => {\n                  setShowUserSettings(true);\n                }}\n                showCreateRoom={() => {\n                  setIsCreateRoom(true);\n                }}\n              />\n            </MobileSidebar>\n          )}\n          {room && (\n            <>\n              <div className=\"content\">\n                <TopBar room={room} />\n                <div className=\"chat-ctn\">\n                  <ChatWrapper\n                    room={room}\n                    msgList={msgList}\n                    userList={userList}\n                    submitMsg={submitMsg}\n                    isVisitor={!!visitingChannel}\n                  />\n                </div>\n              </div>\n              <MobileSidebar\n                isLeft={false}\n                hide={() => setShowRightSidebar(false)}\n                isVisible={showRightSidebar}\n              >\n                <OnlineUsers list={onlineUsers} roles={roleList} />\n              </MobileSidebar>\n            </>\n          )}\n        </div>\n      )}\n    </ChannelContext.Provider>\n  );\n};\n\nexport default ChannelView;\n"],"sourceRoot":""}