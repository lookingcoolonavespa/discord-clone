{"version":3,"sources":["components/Settings/Settings_desktop.js","components/MainNav/MainNav_desktop.js","components/UserInfo/MyAccount_desktop.js","components/UserInfo/UserSettings_desktop.js","components/UserInfo/UserInfo_desktop.js","components/ChannelNav/ChannelNav_desktop.js","components/ChannelView_desktop.js"],"names":["Settings","close","children","props","ReactDOM","createPortal","className","svg","closeSVG","onClick","document","querySelector","MainNav","visitingChannel","useState","isCreateChannel","setIsCreateChannel","history","useHistory","id","plusSVG","active","tooltipText","compassSVG","location","pathname","includes","push","MyAccount","editProfile","setUser","useContext","UserContext","setError","ErrorContext","channelList","popupDetails","setPopupDetails","useInputValues","inputValues","handleChange","resetInputValues","editUsername","useCallback","title","subheader","fields","label","name","type","inputsToSubmit","updateUsername","updateUserInfo","new_username","editEmail","updateEmail","new_email","editPassword","updatePassword","new_password","deleteAcc","actionBtnText","cleanUp","deleteUser","removeUser","getSubmitAction","AccountProfileCard","Divider","PasswordSection","AccountRemoval","Modal","Popup","submitAction","UserSettings","SetError","useReducer","state","action","payload","logout","message","Error","dispatch","categories","btnList","createSettingsButtonDetails","UserProfile","text","category","isDefault","UserInfo","user","isSettings","setIsSettings","Avatar","img","photoURL","color","displayName","IconBtn","settingsSVG","ChannelNav","channel","list","mentioned","ChannelContext","userRole","roomCategories","isCreateRoom","setIsCreateRoom","newRoomInfo","createRoom","room_name","room_category","indexOf","createRoomCategory","editRoomInfo","setEditRoomInfo","src","addSVG","alt","map","i","CatList","cat","isHeader","filter","room","mentionCount","Object","keys","length","RoomLink","isAdmin","editRoom","RoomSettings","ChannelView","finishLoading","useParams","channelID","roomID","setChannel","setRoom","updateChannel","icon","useOnChannelEnter","roleList","roomList","userList","onlineUsers","updateRoom","useOnRoomEnter","msgList","submitMsg","Provider","value","currentRoom","TopBar","ChatWrapper","isVisitor","OnlineUsers","roles"],"mappings":"8OAsCeA,UA3BE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,EAAY,iBAClD,OAAOC,IAASC,aACd,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,cAAC,IAAD,eAAaH,QAGjB,qBAAKG,UAAU,iBAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,sBAAMA,UAAU,UAAhB,SAA2BJ,IAC3B,qBAAKI,UAAU,UAAf,SACE,cAAC,IAAD,CACEC,IAAKC,IACLC,QAASR,EACTK,UAAW,0BAOvBI,SAASC,cAAc,W,kICeZC,IAnCC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACjB,EAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAAUC,cAChB,OACE,qCACE,sBAAKC,GAAG,WAAR,UACE,cAAC,IAAD,CAAmBN,gBAAiBA,IACpC,sBAAKP,UAAU,WAAf,UACE,cAAC,IAAD,IACA,sBAAKA,UAAU,UAAf,UACE,cAAC,IAAD,CACEC,IAAKa,IACLC,OAAQN,EACRN,QAAS,kBAAMO,GAAmB,IAClCM,YAAa,qBAGf,cAAC,IAAD,CACEf,IAAKgB,IACLF,OAAQJ,EAAQO,SAASC,SAASC,SAAS,WAC3CjB,QAAS,kBAAMQ,EAAQU,KAAK,aAC5BL,YAAa,qCAMpBP,GACC,cAAC,IAAD,CAAed,MAAO,kBAAMe,GAAmB,W,iMCgJxCY,EAzKG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACXC,EAAYC,qBAAWC,KAAvBF,QACAG,EAAaF,qBAAWG,KAAxBD,SACAE,EAAgBJ,qBAAWC,KAA3BG,YAER,EAAwCrB,qBAAxC,mBAAOsB,EAAP,KAAqBC,EAArB,KACA,EACEC,cADMC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,iBAG7BC,EAAeC,uBAAY,WAC/BN,EAAgB,CACdO,MAAO,uBACPC,UAAW,kDACXC,OAAQ,CACN,CAAEC,MAAO,WAAYC,KAAM,eAAgBC,KAAM,QACjD,CACEF,MAAO,mBACPC,KAAM,mBACNC,KAAM,aAGVC,eAAgB,mBAEjB,IACGC,EAAiBR,sBAAW,gCAAC,wGAC3BS,YACJ,cACAb,EAAYc,aACZvB,EACAK,GAL+B,2CAOhC,CAACI,EAAYc,aAAcvB,EAASK,IAEjCmB,EAAYX,uBAAY,WAC5BN,EAAgB,CACdO,MAAO,yBACPC,UACE,uDACFC,OAAQ,CACN,CAAEC,MAAO,QAASC,KAAM,YAAaC,KAAM,SAC3C,CACEF,MAAO,mBACPC,KAAM,mBACNC,KAAM,aAGVC,eAAgB,gBAEjB,IACGK,EAAcZ,sBAAW,gCAAC,wGACxBS,YAAe,QAASb,EAAYiB,UAAW1B,GADvB,2CAE7B,CAACS,EAAYiB,UAAW1B,IAErB2B,EAAed,uBAAY,WAC/BN,EAAgB,CACdO,MAAO,yBACPC,UAAW,iDACXC,OAAQ,CACN,CACEC,MAAO,mBACPC,KAAM,mBACNC,KAAM,YAER,CACEF,MAAO,eACPC,KAAM,eACNC,KAAM,YAER,CACEF,MAAO,uBACPC,KAAM,mBACNC,KAAM,aAGVC,eAAgB,mBAEjB,IACGQ,EAAiBf,sBAAW,gCAAC,wGAC3BS,YAAe,WAAYb,EAAYoB,cADZ,2CAEhC,CAACpB,EAAYoB,eAEVC,EAAYjB,uBAAY,WAC5BN,EAAgB,CACdO,MAAO,iBACPC,UACE,qJACFC,OAAQ,CACN,CACEC,MAAO,WACPC,KAAM,WACNC,KAAM,aAGVY,cAAe,iBACfX,eAAgB,SAChBY,QAAS,iBAAM,QAEhB,IAEGC,EAAapB,uBACjB,kBAAMqB,YAAW7B,EAAaF,KAC9B,CAACE,EAAaF,IAGVgC,EAAkBtB,uBAAY,WAClC,cACEP,QADF,IACEA,OADF,EACEA,EAAcc,gBAEd,IAAK,eACH,OAAOC,EACT,IAAK,YACH,OAAOI,EACT,IAAK,eACH,OAAOG,EACT,IAAK,SACH,OAAOK,KAGV,CACDZ,EACAO,EACAH,EACAQ,EAJC,OAKD3B,QALC,IAKDA,OALC,EAKDA,EAAcc,iBAGhB,OACE,qCACE,0BAAS5C,UAAU,aAAnB,UACE,iCACE,8CAEF,sBAAKA,UAAU,gBAAf,UACE,cAAC4D,EAAA,EAAD,CACErC,YAAaA,EACba,aAAcA,EACdY,UAAWA,IAEb,cAACa,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAiBX,aAAcA,IAC/B,cAACU,EAAA,EAAD,IACA,cAACE,EAAA,EAAD,CAAgBT,UAAWA,UAG9BxB,GACC,cAACkC,EAAA,EAAD,CACErE,MAAO,WACLoC,IACAI,KAHJ,SAME,cAAC8B,EAAA,EAAD,yBACEtE,MAAO,WACLoC,IACAI,KAEFD,aAAcA,EACdlC,UAAU,kBACN8B,GAPN,IAQEoC,aAAcP,IACd1B,YAAaA,EACbN,SAAUA,W,iBClHPwC,EAtDM,SAAC,GAAe,IAAbxE,EAAY,EAAZA,MACdyE,EAAa3C,qBAAWG,KAAxBwC,SACR,EAA0BC,sBAAW,SAACC,EAAOC,GAC3C,GAAoB,YAAhBA,EAAO5B,KACT,OAAQ4B,EAAOC,SACb,IAAK,aACH,MAAO,aACT,IAAK,eACH,MAAO,eACT,IAAK,WACH,iDAAC,iHAESC,cAFT,sDAIGL,EAAS,KAAMM,SAJlB,wDAAD,uDAOA,MACF,QACE,MAAM,IAAIC,IAAM,0BAGrB,cApBH,mBAAOL,EAAP,KAAcM,EAAd,KAsBA,OACE,cAAC,UAAD,CACEjF,MAAOA,EACPkF,WAAY,CAAC,gBAAiB,QAC9BC,QAAS,CACPC,EACE,aACA,iBACA,GAEFA,EAA4B,eAAgB,iBAC5CA,EAA4B,UAAW,SAEzCH,SAAUA,EAZZ,SAcGN,GACC,CACE,aACE,cAAC,EAAD,CACE/C,YAAa,kBACXqD,EAAS,CAAEjC,KAAM,UAAW6B,QAAS,oBAI3C,eAAgB,cAACQ,EAAA,EAAD,KAChBV,MAOV,SAASS,EAA4BE,EAAMC,EAAUC,GACnD,MAAO,CACLF,OACAC,WACAC,a,oBC/BWC,IA5BE,WACf,IAAQC,EAAS5D,qBAAWC,KAApB2D,KACR,EAAoC7E,oBAAS,GAA7C,mBAAO8E,EAAP,KAAmBC,EAAnB,KACA,OACE,qCACE,yBAASvF,UAAU,kBAAnB,SACE,sBAAKA,UAAU,MAAf,UACE,cAACwF,EAAA,EAAD,CAAQC,IAAKJ,EAAKK,SAAUC,MAAON,EAAKM,QACxC,qBAAK3F,UAAU,WAAf,SACE,qBAAKA,UAAU,mBAAf,SAAmCqF,EAAKO,gBAE1C,qBAAK5F,UAAU,UAAf,SACE,cAAC6F,EAAA,EAAD,CACE5F,IAAK6F,IACL3F,QAAS,WACPoF,GAAc,aAMvBD,GACC,cAAC,EAAD,CAAc3F,MAAO,kBAAM4F,GAAc,W,yMC6GlCQ,EAxHI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASnB,EAAuB,EAAvBA,WAAYoB,EAAW,EAAXA,KACzCpB,EAAaA,GAAc,GAE3B,IAAQqB,EAAczE,qBAAWC,KAAzBwE,UACR,EAAqCzE,qBAAW0E,KAAxCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,eACV1E,EAAaF,qBAAWG,KAAxBD,SAER,EAAwCnB,oBAAS,GAAjD,mBAAO8F,EAAP,KAAqBC,EAArB,KACA,EAIIvE,cAHWwE,EADf,EACEvE,YACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,iBAXkD,sDAcpD,wGACQsE,YACJT,EAAQnF,GACR2F,EAAYE,UACZF,EAAYG,eAAiB,MAJjC,WAM6D,IAAvDN,EAAeO,QAAQJ,EAAYG,eANzC,gCAOUE,YAAmBb,EAAQnF,GAAI2F,EAAYG,eAPrD,4CAdoD,sBAyBpD,MAAwCnG,qBAAxC,mBAAOsG,EAAP,KAAqBC,EAArB,KAEA,OACE,qCACE,sBAAK/G,UAAU,sBAAf,UACE,iCAASgG,EAAQtD,OACjB,sBAAK1C,UAAU,YAAf,UACgB,UAAboG,GACC,oBAAIpG,UAAU,8BAAd,SACE,yBACEA,UAAU,UACVG,QAAS,kBAAMoG,GAAgB,IAFjC,UAIE,qBAAKS,IAAKC,IAAQC,IAAI,cACtB,qDAILrC,EAAWsC,KAAI,SAACjC,EAAUkC,GAAX,OACd,cAACC,EAAA,EAAD,CAEEC,IAAKpC,EACLqC,SAAuB,SAAbrC,EACVlF,UAAU,wBAJZ,SAMGiG,EACEuB,QAAO,SAACC,GACP,OAAIA,EAAKvC,WAAaA,IACjBuC,EAAKvC,UAAyB,SAAbA,KAIvBiC,KAAI,SAACM,GAAU,IAAD,EAGTC,EAKJ,QANG,OAACxB,QAAD,IAACA,GAAD,UAACA,EAAYF,EAAQnF,WAArB,QAAC,EAA0B4G,EAAK5G,OAGjC6G,EAAeC,OAAOC,KACpB1B,EAAUF,EAAQnF,IAAI4G,EAAK5G,KAC3BgH,QAEF,cAACC,EAAA,EAAD,CAEE9B,QAASA,EACTyB,KAAMA,EACNC,aAAcA,EACdK,QAAsB,UAAb3B,EACT4B,SAAU,kBAAMjB,EAAgBU,KAL3BA,EAAK5G,QAtBbuG,SAkCX,cAAC,IAAD,OAEDd,GACC,cAACtC,EAAA,EAAD,CACErE,MAAO,WACL4G,GAAgB,GAChBpE,KAHJ,SAME,cAAC8B,EAAA,EAAD,CACEtE,MAAO,WACL4G,GAAgB,GAChBpE,KAEFD,aAAcA,EACdlC,UAAU,iBACVsC,MAAM,oBACNE,OAAQ,CACN,CAAEC,MAAO,YAAaC,KAAM,YAAaC,KAAM,QAC/C,CACEF,MAAO,gBACPC,KAAM,gBACNC,KAAM,SAGVuB,aAxG0C,2CAyG1CvC,SAAUA,EACVM,YAAauE,MAIlBM,GACC,cAACmB,EAAA,EAAD,CACER,KAAMX,EACNnH,MAAO,kBAAMoH,W,+DC7CRmB,UAzEK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAAexG,EAAe,EAAfA,SACpC,EAA8BF,qBAAWC,KAAjC2D,EAAR,EAAQA,KAAMxD,EAAd,EAAcA,YACd,EAA8BuG,cAAtBC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,EAA8B9H,mBAAS,CAAEK,GAAIwH,IAA7C,mBAAOrC,EAAP,KAAgBuC,EAAhB,KACA,EAAwB/H,mBAAS,CAAEK,GAAIyH,IAAvC,mBAAOb,EAAP,KAAae,EAAb,KAEMC,EAAgBpG,uBACpB,SAACK,EAAMgG,GAAP,OAAgBH,EAAW,CAAE7F,OAAMgG,OAAM7H,GAAIwH,MAC7C,CAACA,IAEH,EAQIM,YACFtD,EACAgD,EACAxG,EACA4G,EACA9G,GAZApB,EADF,EACEA,gBACAqI,EAFF,EAEEA,SACAvC,EAHF,EAGEA,eACAwC,EAJF,EAIEA,SACAC,EALF,EAKEA,SACAC,EANF,EAMEA,YACA3C,EAPF,EAOEA,SAUI4C,EAAa3G,uBACjB,SAACK,GAAD,OAAU8F,EAAQ,CAAE9F,OAAM7B,GAAIyH,MAC9B,CAACA,IAEH,EAA+BW,YAC7B5D,EACAgD,EACAC,EACAU,EACAb,EACAxG,GANMuH,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UASjB,OACE,cAAChD,EAAA,EAAeiD,SAAhB,CAAyBC,MAAO,CAAEjD,WAAUC,kBAA5C,SACE,sBAAKrG,UAAU,eAAf,UACE,cAAC,IAAD,CAASO,gBAAiBA,IACzByF,GACC,cAAC,EAAD,CACEA,QAASA,EACTnB,WAAYwB,EACZJ,KAAM4C,EACNL,QAASA,EACTc,YAAa7B,IAGhBA,GACC,sBAAKzH,UAAU,UAAf,UACE,cAACuJ,EAAA,EAAD,CAAQ9B,KAAMA,IACd,sBAAKzH,UAAU,WAAf,UACE,cAACwJ,EAAA,EAAD,CACE/B,KAAMA,EACNyB,QAASA,EACTJ,SAAUA,EACVK,UAAWA,EACXM,YAAalJ,IAEf,cAACmJ,EAAA,EAAD,CAAazD,KAAM8C,EAAaY,MAAOf","file":"static/js/10.17cf58c0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from './Sidebar';\nimport IconBtn from '../IconBtn';\n\nimport closeSVG from '../../assets/svg/close-line.svg';\n\nimport '../../styles/Settings.css';\n\nconst Settings = ({ close, children, ...props }) => {\n  return ReactDOM.createPortal(\n    <div className=\"settings\">\n      <div className=\"sidebar-region\">\n        <div className=\"sidebar-scroller\">\n          <Sidebar {...props}></Sidebar>\n        </div>\n      </div>\n      <div className=\"content-region\">\n        <div className=\"content-transition-wrapper\">\n          <div className=\"content-scroller\">\n            <main className=\"content\">{children}</main>\n            <div className=\"actions\">\n              <IconBtn\n                svg={closeSVG}\n                onClick={close}\n                className={'close-btn'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.querySelector('body'),\n  );\n};\n\nexport default Settings;\n\nSettings.propTypes = {\n  close: PropTypes.func,\n  children: PropTypes.element,\n};\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport ChannelList from './ChannelList';\n\nimport '../../styles/MainNav.css';\nimport ChannelListHeader from './ChannelListHeader';\nimport MainNavBtn from './MainNavBtn';\nimport CreateChannel from '../CreateChannel/CreateChannel';\n\nimport plusSVG from '../../assets/svg/add-line.svg';\nimport compassSVG from '../../assets/svg/compass-3-fill.svg';\n\nconst MainNav = ({ visitingChannel }) => {\n  const [isCreateChannel, setIsCreateChannel] = useState(false);\n\n  const history = useHistory();\n  return (\n    <>\n      <nav id=\"main-nav\">\n        <ChannelListHeader visitingChannel={visitingChannel} />\n        <div className=\"scroller\">\n          <ChannelList />\n          <div className=\"btn-ctn\">\n            <MainNavBtn\n              svg={plusSVG}\n              active={isCreateChannel}\n              onClick={() => setIsCreateChannel(true)}\n              tooltipText={'Create a channel'}\n            />\n            {/* add a server */}\n            <MainNavBtn\n              svg={compassSVG}\n              active={history.location.pathname.includes('explore')}\n              onClick={() => history.push('/explore')}\n              tooltipText={'Explore public channels'}\n            />\n          </div>\n          {/* explore servers */}\n        </div>\n      </nav>\n      {isCreateChannel && (\n        <CreateChannel close={() => setIsCreateChannel(false)} />\n      )}\n    </>\n  );\n};\n\nexport default MainNav;\n\nMainNav.propTypes = {\n  visitingChannel: PropTypes.object,\n};\n","import React, { useState, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  updateUserInfo,\n  removeUser,\n} from '../../logic/user_firebaseStuff';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport AccountProfileCard from './AccountProfileCard';\nimport Divider from '../Settings/Divider';\nimport PasswordSection from './PasswordSection';\nimport AccountRemoval from './AccountRemoval';\nimport Modal from '../Modal';\nimport Popup from '../Popup';\n\nconst MyAccount = ({ editProfile }) => {\n  const { setUser } = useContext(UserContext);\n  const { setError } = useContext(ErrorContext);\n  const { channelList } = useContext(UserContext);\n\n  const [popupDetails, setPopupDetails] = useState();\n  const { inputValues, handleChange, resetInputValues } =\n    useInputValues();\n\n  const editUsername = useCallback(() => {\n    setPopupDetails({\n      title: 'Change your username',\n      subheader: 'Enter a new username and your existing password',\n      fields: [\n        { label: 'username', name: 'new_username', type: 'text' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_username',\n    });\n  }, []);\n  const updateUsername = useCallback(async () => {\n    await updateUserInfo(\n      'displayName',\n      inputValues.new_username,\n      setUser,\n      channelList,\n    );\n  }, [inputValues.new_username, setUser, channelList]);\n\n  const editEmail = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader:\n        'Enter a new email address and your existing password',\n      fields: [\n        { label: 'email', name: 'new_email', type: 'email' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_email',\n    });\n  }, []);\n  const updateEmail = useCallback(async () => {\n    await updateUserInfo('email', inputValues.new_email, setUser);\n  }, [inputValues.new_email, setUser]);\n\n  const editPassword = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter your current password and a new password',\n      fields: [\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n        {\n          label: 'new password',\n          name: 'new_password',\n          type: 'password',\n        },\n        {\n          label: 'confirm new password',\n          name: 'confirm_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_password',\n    });\n  }, []);\n  const updatePassword = useCallback(async () => {\n    await updateUserInfo('password', inputValues.new_password);\n  }, [inputValues.new_password]);\n\n  const deleteAcc = useCallback(() => {\n    setPopupDetails({\n      title: 'Delete Account',\n      subheader:\n        'Are you sure you want to delete your account? This will immediately log you out of your account and you will not be able to log in again. Forever.',\n      fields: [\n        {\n          label: 'password',\n          name: 'password',\n          type: 'password',\n        },\n      ],\n      actionBtnText: 'Delete Account',\n      inputsToSubmit: 'delete',\n      cleanUp: () => '', // need to feed a cleanup function to avoid state update on unmounted component\n    });\n  }, []);\n\n  const deleteUser = useCallback(\n    () => removeUser(channelList, setError),\n    [channelList, setError],\n  );\n\n  const getSubmitAction = useCallback(() => {\n    switch (\n      popupDetails?.inputsToSubmit // get submit action based which popupDetails is active\n    ) {\n      case 'new_username':\n        return updateUsername;\n      case 'new_email':\n        return updateEmail;\n      case 'new_password':\n        return updatePassword;\n      case 'delete':\n        return deleteUser;\n      default:\n    }\n  }, [\n    updateUsername,\n    updatePassword,\n    updateEmail,\n    deleteUser,\n    popupDetails?.inputsToSubmit,\n  ]);\n\n  return (\n    <>\n      <section className=\"my_account\">\n        <header>\n          <h2>My Account</h2>\n        </header>\n        <div className=\"inner-content\">\n          <AccountProfileCard\n            editProfile={editProfile}\n            editUsername={editUsername}\n            editEmail={editEmail}\n          />\n          <Divider />\n          <PasswordSection editPassword={editPassword} />\n          <Divider />\n          <AccountRemoval deleteAcc={deleteAcc} />\n        </div>\n      </section>\n      {popupDetails && (\n        <Modal\n          close={() => {\n            setPopupDetails();\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setPopupDetails();\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            {...popupDetails}\n            submitAction={getSubmitAction()}\n            inputValues={inputValues}\n            setError={setError}\n          ></Popup>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default MyAccount;\n\nMyAccount.propTypes = {\n  editProfile: PropTypes.func,\n};\n","import React, { useContext, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { logout } from '../../logic/user_firebaseStuff';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Settings from '../Settings/Settings_desktop';\nimport MyAccount from './MyAccount_desktop';\nimport UserProfile from './UserProfile';\nimport Error from '../Error';\n\nconst UserSettings = ({ close }) => {\n  const { SetError } = useContext(ErrorContext);\n  const [state, dispatch] = useReducer((state, action) => {\n    if (action.type === 'swap_to') {\n      switch (action.payload) {\n        case 'my account':\n          return 'my account';\n        case 'user profile':\n          return 'user profile';\n        case 'log out':\n          (async function onLogout() {\n            try {\n              await logout();\n            } catch (error) {\n              SetError(error.message);\n            }\n          })();\n          break;\n        default:\n          throw new Error(\"that doesn't exist!\");\n      }\n    }\n  }, 'my account');\n\n  return (\n    <Settings\n      close={close}\n      categories={['user settings', 'none']}\n      btnList={[\n        createSettingsButtonDetails(\n          'my account',\n          'user settings',\n          true,\n        ),\n        createSettingsButtonDetails('user profile', 'user settings'),\n        createSettingsButtonDetails('log out', 'none'),\n      ]}\n      dispatch={dispatch}\n    >\n      {state &&\n        {\n          'my account': (\n            <MyAccount\n              editProfile={() =>\n                dispatch({ type: 'swap_to', payload: 'user profile' })\n              }\n            />\n          ),\n          'user profile': <UserProfile />,\n        }[state]}\n    </Settings>\n  );\n};\n\nexport default UserSettings;\n\nfunction createSettingsButtonDetails(text, category, isDefault) {\n  return {\n    text,\n    category,\n    isDefault,\n  };\n}\n\nUserSettings.propTypes = {\n  close: PropTypes.func,\n};\n","import React, { useContext, useState } from 'react';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\n\nimport Avatar from '../Avatar';\nimport IconBtn from '../IconBtn';\nimport UserSettings from './UserSettings_desktop';\n\nimport settingsSVG from '../../assets/svg/settings-3-fill.svg';\n\nimport '../../styles/UserInfo.css';\n\nconst UserInfo = () => {\n  const { user } = useContext(UserContext);\n  const [isSettings, setIsSettings] = useState(false);\n  return (\n    <>\n      <section className=\"user-info-panel\">\n        <div className=\"ctn\">\n          <Avatar img={user.photoURL} color={user.color} />\n          <div className=\"name-tag\">\n            <div className=\"username-wrapper\">{user.displayName}</div>\n          </div>\n          <div className=\"btn-ctn\">\n            <IconBtn\n              svg={settingsSVG}\n              onClick={() => {\n                setIsSettings(true);\n              }}\n            />\n          </div>\n        </div>\n      </section>\n      {isSettings && (\n        <UserSettings close={() => setIsSettings(false)} />\n      )}\n    </>\n  );\n};\n\nexport default UserInfo;\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ChannelContext } from '../../logic/contexts/ChannelContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport {\n  createRoom,\n  createRoomCategory,\n} from '../../logic/channel_firebaseStuff';\n\nimport UserInfo from '../UserInfo/UserInfo_desktop';\nimport CatList from '../CatList';\nimport RoomLink from './RoomLink';\nimport Modal from '../Modal';\nimport Popup from '../Popup';\nimport RoomSettings from '../Settings/RoomSettings/RoomSettings';\n\nimport addSVG from '../../assets/svg/add-line.svg';\n\nimport '../../styles/ChannelNav.css';\n\nconst ChannelNav = ({ channel, categories, list }) => {\n  categories = categories || [];\n\n  const { mentioned } = useContext(UserContext);\n  const { userRole, roomCategories } = useContext(ChannelContext);\n  const { setError } = useContext(ErrorContext);\n\n  const [isCreateRoom, setIsCreateRoom] = useState(false);\n  const {\n    inputValues: newRoomInfo,\n    handleChange,\n    resetInputValues,\n  } = useInputValues();\n\n  async function onCreateRoom() {\n    await createRoom(\n      channel.id,\n      newRoomInfo.room_name,\n      newRoomInfo.room_category || null,\n    );\n    if (roomCategories.indexOf(newRoomInfo.room_category) === -1) {\n      await createRoomCategory(channel.id, newRoomInfo.room_category);\n    }\n  }\n\n  const [editRoomInfo, setEditRoomInfo] = useState();\n\n  return (\n    <>\n      <nav className=\"channel-nav sidebar\">\n        <header>{channel.name}</header>\n        <div className=\"room-list\">\n          {userRole === 'owner' && (\n            <li className=\"room-link-item new_room-btn\">\n              <button\n                className=\"content\"\n                onClick={() => setIsCreateRoom(true)}\n              >\n                <img src={addSVG} alt=\"plus icon\" />\n                <span>Add new room</span>\n              </button>\n            </li>\n          )}\n          {categories.map((category, i) => (\n            <CatList\n              key={i}\n              cat={category}\n              isHeader={category !== 'none'}\n              className=\"category-room-wrapper\"\n            >\n              {list\n                .filter((room) => {\n                  if (room.category === category) return true;\n                  if (!room.category && category === 'none')\n                    return true;\n                  return false;\n                })\n                .map((room) => {\n                  const hasMentions =\n                    !!mentioned?.[channel.id]?.[room.id];\n                  let mentionCount;\n                  if (hasMentions)\n                    mentionCount = Object.keys(\n                      mentioned[channel.id][room.id],\n                    ).length;\n                  return (\n                    <RoomLink\n                      key={room.id}\n                      channel={channel}\n                      room={room}\n                      mentionCount={mentionCount}\n                      isAdmin={userRole === 'owner'}\n                      editRoom={() => setEditRoomInfo(room)}\n                    />\n                  );\n                })}\n            </CatList>\n          ))}\n        </div>\n        <UserInfo />\n      </nav>\n      {isCreateRoom && (\n        <Modal\n          close={() => {\n            setIsCreateRoom(false);\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setIsCreateRoom(false);\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            title=\"Create a new room\"\n            fields={[\n              { label: 'Room Name', name: 'room_name', type: 'text' },\n              {\n                label: 'Room Category',\n                name: 'room_category',\n                type: 'text',\n              },\n            ]}\n            submitAction={onCreateRoom}\n            setError={setError}\n            inputValues={newRoomInfo}\n          ></Popup>\n        </Modal>\n      )}\n      {editRoomInfo && (\n        <RoomSettings\n          room={editRoomInfo}\n          close={() => setEditRoomInfo()}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ChannelNav;\n\nChannelNav.propTypes = {\n  channel: PropTypes.object,\n  categories: PropTypes.array,\n  list: PropTypes.array,\n};\n","import React, { useState, useCallback, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ChannelContext } from '../logic/contexts/ChannelContext';\nimport { UserContext } from '../logic/contexts/UserContext';\n\nimport ChannelNav from './ChannelNav/ChannelNav_desktop';\nimport OnlineUsers from './OnlineUsers/OnlineUsers';\nimport TopBar from './TopBar';\nimport ChatWrapper from './Chat/ChatWrapper';\nimport MainNav from './MainNav/MainNav_desktop';\n\nimport '../styles/ChannelView.css';\n\nimport useOnChannelEnter from '../logic/custom-hooks/useOnChannelEnter';\nimport useOnRoomEnter from '../logic/custom-hooks/useOnRoomEnter';\n\nconst ChannelView = ({ finishLoading, setError }) => {\n  const { user, channelList } = useContext(UserContext);\n  const { channelID, roomID } = useParams();\n  const [channel, setChannel] = useState({ id: channelID });\n  const [room, setRoom] = useState({ id: roomID });\n\n  const updateChannel = useCallback(\n    (name, icon) => setChannel({ name, icon, id: channelID }),\n    [channelID],\n  );\n  const {\n    visitingChannel,\n    roleList,\n    roomCategories,\n    roomList,\n    userList,\n    onlineUsers,\n    userRole,\n  } = useOnChannelEnter(\n    user,\n    channelID,\n    channelList,\n    updateChannel,\n    setError,\n  );\n\n  // room stuff\n  const updateRoom = useCallback(\n    (name) => setRoom({ name, id: roomID }),\n    [roomID],\n  );\n  const { msgList, submitMsg } = useOnRoomEnter(\n    user,\n    channelID,\n    roomID,\n    updateRoom,\n    finishLoading,\n    setError,\n  );\n\n  return (\n    <ChannelContext.Provider value={{ userRole, roomCategories }}>\n      <div className=\"channel-view\">\n        <MainNav visitingChannel={visitingChannel} />\n        {channel && (\n          <ChannelNav\n            channel={channel}\n            categories={roomCategories}\n            list={roomList}\n            setRoom={setRoom}\n            currentRoom={room}\n          />\n        )}\n        {room && (\n          <div className=\"content\">\n            <TopBar room={room} />\n            <div className=\"chat-ctn\">\n              <ChatWrapper\n                room={room}\n                msgList={msgList}\n                userList={userList}\n                submitMsg={submitMsg}\n                isVisitor={!!visitingChannel}\n              />\n              <OnlineUsers list={onlineUsers} roles={roleList} />\n            </div>\n          </div>\n        )}\n      </div>\n    </ChannelContext.Provider>\n  );\n};\n\nexport default ChannelView;\n\nChannelView.propTypes = {\n  finishLoading: PropTypes.func,\n  setError: PropTypes.func,\n};\n"],"sourceRoot":""}