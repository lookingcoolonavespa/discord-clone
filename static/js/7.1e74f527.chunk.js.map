{"version":3,"sources":["logic/custom-hooks/useTouchEvents.js","components/MobileSidebar.js","components/Settings/Settings _mobile.js","components/UserInfo/UserInfo_mobile.js","components/Explore/ChannelCard.js","components/NavBtn.js","components/MainNav/MainNav_mobile.js","assets/svg/arrow-left-s-line.svg","assets/svg/arrow-right-s-line.svg","assets/svg/search-line.svg","components/Explore/BannerSearch.js","components/UserInfo/MyAccount _mobile.js","components/UserInfo/UserSettings_mobile.js","components/Explore/Explore_mobile.js"],"names":["useTouchEvents","onRightSwipe","onLeftSwipe","useState","touchStart","setTouchStart","isMoved","setIsMoved","touchEnd","setTouchEnd","handleTouchStart","e","targetTouches","clientX","handleTouchMove","handleTouchEnd","console","log","MobileSidebar","isVisible","isLeft","className","children","hide","defaultClassName","contentRef","useRef","useTransition","key","item","from","transform","enter","leave","expires","transitions","styles","t","i","div","onClick","ref","stopPropagation","target","closest","style","Settings","close","props","showSidebar","setShowSidebar","closeSidebar","useCallback","openSidebar","ReactDOM","createPortal","onTouchEnd","onTouchMove","onTouchStart","svg","closeSVG","document","querySelector","UserInfo","showSettings","user","useContext","UserContext","img","photoURL","color","displayName","settingsSVG","ChannelCard","channel","icon","channelName","name","description","NavBtn","text","type","src","alt","MainNav","beginCreateChannel","isCreateChannel","visitingChannel","history","useHistory","id","plusSVG","active","tooltipText","compassSVG","location","pathname","includes","push","BannerSearch","query","onSearch","handleChange","cancelSearch","backgroundImage","bannerBG","value","onKeyUp","onChange","searchSVG","MyAccount","setUser","setError","ErrorContext","channelList","popupDetails","setPopupDetails","useInputValues","inputValues","resetInputValues","editUsername","title","subheader","fields","label","inputsToSubmit","updateUsername","a","updateUserInfo","new_username","editEmail","updateEmail","new_email","editPassword","updatePassword","new_password","deleteAcc","actionBtnText","cleanUp","deleteUser","removeUser","getSubmitAction","Field","display","email","Divider","PasswordSection","AccountRemoval","Modal","Popup","submitAction","isMobile","UserSettings","SetError","useReducer","state","action","payload","logout","message","Error","dispatch","categories","btnList","createSettingsButtonDetails","editProfile","UserProfile","category","Explore","finishLoading","publicChannelList","setPublicChannelList","firstChannelID","setQuery","searchedQuery","isSearch","setIsSearch","scrollerRef","loading","setLoading","useEffect","getBatchOfChannels","status","getPublicChannels","data","current","scrollTop","searchChannels","searchPublicChannels","error","showLeftSidebar","hideLeftSidebar","setIsCreateChannel","showUserSettings","setShowUserSettings","isDefault","prevSVG","find","c","nextSVG","length","map","to"],"mappings":"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","file":"static/js/7.1e74f527.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function useTouchEvents(onRightSwipe, onLeftSwipe) {\n  const [touchStart, setTouchStart] = useState(0);\n  const [isMoved, setIsMoved] = useState(false);\n  const [touchEnd, setTouchEnd] = useState(0);\n\n  function handleTouchStart(e) {\n    setTouchStart(e.targetTouches[0].clientX);\n  }\n  function handleTouchMove(e) {\n    setIsMoved(true);\n    setTouchEnd(e.targetTouches[0].clientX);\n  }\n  function handleTouchEnd() {\n    if (isMoved) {\n      console.log(touchStart, touchEnd);\n      if (touchStart - touchEnd > 100) {\n        onRightSwipe && onRightSwipe();\n      }\n      if (touchStart - touchEnd < -100) {\n        onLeftSwipe && onLeftSwipe();\n      }\n    }\n    setTouchEnd(0);\n    setTouchStart(0);\n    setIsMoved(false);\n  }\n\n  return { handleTouchStart, handleTouchMove, handleTouchEnd };\n}\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTransition, animated } from 'react-spring';\n\nconst MobileSidebar = ({\n  isVisible,\n  isLeft,\n  className,\n  children,\n  hide,\n}) => {\n  const defaultClassName = isLeft ? 'left-sidebar' : 'right-sidebar';\n  const contentRef = useRef();\n  const transitions = useTransition(isVisible, {\n    key: (item) => item,\n    from: {\n      transform: isLeft\n        ? 'translate3d(-100%,0,0)'\n        : 'translate3d(100%,0,0)',\n    },\n    enter: {\n      transform: 'translate3d(0%,0,0)',\n    },\n    leave: {\n      transform: isLeft\n        ? 'translate3d(-100%,0,0)'\n        : 'translate3d(100%,0,0)',\n    },\n    // key: true,\n    expires: 0,\n  });\n  return transitions((styles, item, t, i) => {\n    return (\n      item && (\n        <animated.div\n          className={\n            className\n              ? `${className} ${defaultClassName}`\n              : `${defaultClassName}`\n          }\n          onClick={hide}\n        >\n          <animated.div\n            className=\"content-wrapper\"\n            ref={contentRef}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (\n                e.target.closest('li') ||\n                e.target.closest('button')\n              )\n                hide();\n            }}\n            style={styles}\n          >\n            {children}\n          </animated.div>\n        </animated.div>\n      )\n    );\n  });\n};\n\nexport default MobileSidebar;\n\nMobileSidebar.propTypes = {\n  isVisible: PropTypes.bool,\n  isLeft: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]),\n  hide: PropTypes.func,\n};\n","import React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport useTouchEvents from '../../logic/custom-hooks/useTouchEvents';\n\nimport Sidebar from './Sidebar';\nimport IconBtn from '../IconBtn';\nimport MobileSidebar from '../MobileSidebar';\n\nimport closeSVG from '../../assets/svg/close-line.svg';\n\nimport '../../styles/Settings.css';\n\nconst Settings = ({ close, children, ...props }) => {\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  const closeSidebar = useCallback(() => {\n    setShowSidebar(false);\n  }, []);\n  const openSidebar = useCallback(() => {\n    setShowSidebar(true);\n  }, []);\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } =\n    useTouchEvents(closeSidebar, openSidebar);\n  return ReactDOM.createPortal(\n    <div\n      className=\"settings mobile\"\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <MobileSidebar\n        isLeft={true}\n        className=\"sidebar-region\"\n        hide={closeSidebar}\n        isVisible={showSidebar}\n      >\n        <div className=\"sidebar-scroller\">\n          <Sidebar {...props}></Sidebar>\n        </div>\n      </MobileSidebar>\n      <div className=\"content-region\">\n        <div className=\"content-transition-wrapper\">\n          <div className=\"content-scroller\">\n            <main className=\"content\">{children}</main>\n            <div className=\"actions\">\n              <IconBtn\n                svg={closeSVG}\n                onClick={close}\n                className={'close-btn'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.querySelector('body'),\n  );\n};\n\nexport default Settings;\n\nSettings.propTypes = {\n  close: PropTypes.func,\n  children: PropTypes.element,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\n\nimport Avatar from '../Avatar';\nimport IconBtn from '../IconBtn';\n\nimport '../../styles/UserInfo.css';\nimport settingsSVG from '../../assets/svg/settings-3-fill.svg';\n\nconst UserInfo = ({ showSettings }) => {\n  const { user } = useContext(UserContext);\n  return (\n    <section className=\"user-info-panel\">\n      <div className=\"ctn\">\n        <Avatar img={user.photoURL} color={user.color} />\n        <div className=\"name-tag\">\n          <div className=\"username-wrapper\">{user.displayName}</div>\n        </div>\n        <div className=\"btn-ctn\">\n          <IconBtn svg={settingsSVG} onClick={showSettings} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default UserInfo;\n\nUserInfo.propTypes = {\n  showSettings: PropTypes.func,\n};\n","import React from 'react';\nimport Avatar from '../Avatar';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/ChannelCard.css';\n\nconst ChannelCard = ({ channel }) => {\n  return (\n    <div className=\"channel-info-card default_transition\">\n      <header>\n        <div className=\"channel-main-info\">\n          <Avatar img={channel.icon} channelName={channel.name} />\n          <div className=\"channel-name-wrapper\">{channel.name}</div>\n        </div>\n      </header>\n      <div className=\"content\">\n        <div className=\"channel-desc-wrapper\">\n          {channel.description}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChannelCard;\n\nChannelCard.propTypes = {\n  channel: PropTypes.objectOf(PropTypes.string),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NavBtn = ({ icon, text, className, style, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      className={className ? `${className} nav-btn` : 'nav-btn'}\n      style={style}\n      onClick={onClick}\n    >\n      <div className=\"icon-wrapper\">\n        <img src={icon} alt={text} />\n      </div>\n      <div className=\"text-wrapper\">{text}</div>\n    </button>\n  );\n};\n\nexport default NavBtn;\n\nNavBtn.propTypes = {\n  icon: PropTypes.string,\n  text: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport ChannelList from './ChannelList';\n\nimport '../../styles/MainNav.css';\nimport ChannelListHeader from './ChannelListHeader';\nimport MainNavBtn from './MainNavBtn';\n\nimport plusSVG from '../../assets/svg/add-line.svg';\nimport compassSVG from '../../assets/svg/compass-3-fill.svg';\n\nconst MainNav = ({\n  beginCreateChannel,\n  isCreateChannel,\n  visitingChannel,\n}) => {\n  const history = useHistory();\n  return (\n    <>\n      <nav id=\"main-nav\">\n        <ChannelListHeader visitingChannel={visitingChannel} />\n        <div className=\"scroller\">\n          <ChannelList />\n          <div className=\"btn-ctn\">\n            <MainNavBtn\n              svg={plusSVG}\n              active={isCreateChannel}\n              onClick={beginCreateChannel}\n              tooltipText={'Create a channel'}\n            />\n            {/* add a server */}\n            <MainNavBtn\n              svg={compassSVG}\n              active={history.location.pathname.includes('explore')}\n              onClick={() => history.push('/explore')}\n              tooltipText={'Explore public channels'}\n            />\n          </div>\n          {/* explore servers */}\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default MainNav;\n\nMainNav.propTypes = {\n  beginCreateChannel: PropTypes.func,\n  isCreateChannel: PropTypes.bool,\n  visitingChannel: PropTypes.object,\n};\n","export default __webpack_public_path__ + \"static/media/arrow-left-s-line.27e63cb8.svg\";","export default __webpack_public_path__ + \"static/media/arrow-right-s-line.5e3e4e57.svg\";","export default __webpack_public_path__ + \"static/media/search-line.9477a86b.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport searchSVG from '../../assets/svg/search-line.svg';\nimport bannerBG from '../../assets/png/Waffle_Coffee_Dessert.png';\nimport closeSVG from '../../assets/svg/close-circle-fill.svg';\n\nconst BannerSearch = ({\n  query,\n  onSearch,\n  handleChange,\n  cancelSearch,\n}) => {\n  return (\n    <div\n      className=\"container\"\n      style={{\n        backgroundImage: `url(${bannerBG})`,\n      }}\n    >\n      <h3>Find your community on bread</h3>\n      <div className=\"subheader\">\n        From gaming, to music, to learning, there&apos;s a place for\n        you\n      </div>\n      <div className=\"search\">\n        <div className=\"searchBar\">\n          <div className=\"input-wrapper\">\n            <input\n              type=\"text\"\n              value={query}\n              onKeyUp={(e) => {\n                if (e.key === 'Enter') onSearch();\n              }}\n              onChange={handleChange}\n            />\n          </div>\n          {query ? (\n            <img\n              src={closeSVG}\n              alt=\"cancel search\"\n              className=\"icon-btn\"\n              onClick={cancelSearch}\n            />\n          ) : (\n            <img src={searchSVG} alt=\"search\" />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BannerSearch;\n\nBannerSearch.propTypes = {\n  query: PropTypes.string,\n  onSearch: PropTypes.func,\n  handleChange: PropTypes.func,\n  cancelSearch: PropTypes.func,\n};\n","import React, { useState, useCallback, useContext } from 'react';\n\nimport {\n  updateUserInfo,\n  removeUser,\n} from '../../logic/user_firebaseStuff';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Field from '../Settings/Field';\nimport Divider from '../Settings/Divider';\nimport PasswordSection from './PasswordSection';\nimport AccountRemoval from './AccountRemoval';\nimport Modal from '../Modal';\nimport Popup from '../Popup';\n\nconst MyAccount = () => {\n  const { user, setUser } = useContext(UserContext);\n  const { setError } = useContext(ErrorContext);\n  const { channelList } = useContext(UserContext);\n\n  const [popupDetails, setPopupDetails] = useState();\n  const { inputValues, handleChange, resetInputValues } =\n    useInputValues();\n\n  const editUsername = useCallback(() => {\n    setPopupDetails({\n      title: 'Change your username',\n      subheader: 'Enter a new username and your existing password',\n      fields: [\n        { label: 'username', name: 'new_username', type: 'text' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_username',\n    });\n  }, []);\n  const updateUsername = useCallback(async () => {\n    await updateUserInfo(\n      'displayName',\n      inputValues.new_username,\n      setUser,\n      channelList,\n    );\n  }, [inputValues.new_username, setUser, channelList]);\n\n  const editEmail = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader:\n        'Enter a new email address and your existing password',\n      fields: [\n        { label: 'email', name: 'new_email', type: 'email' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_email',\n    });\n  }, []);\n  const updateEmail = useCallback(async () => {\n    await updateUserInfo('email', inputValues.new_email, setUser);\n  }, [inputValues.new_email, setUser]);\n\n  const editPassword = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter your current password and a new password',\n      fields: [\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n        {\n          label: 'new password',\n          name: 'new_password',\n          type: 'password',\n        },\n        {\n          label: 'confirm new password',\n          name: 'confirm_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_password',\n    });\n  }, []);\n  const updatePassword = useCallback(async () => {\n    await updateUserInfo('password', inputValues.new_password);\n  }, [inputValues.new_password]);\n\n  const deleteAcc = useCallback(() => {\n    setPopupDetails({\n      title: 'Delete Account',\n      subheader:\n        'Are you sure you want to delete your account? This will immediately log you out of your account and you will not be able to log in again. Forever.',\n      fields: [\n        {\n          label: 'password',\n          name: 'password',\n          type: 'password',\n        },\n      ],\n      actionBtnText: 'Delete Account',\n      inputsToSubmit: 'delete',\n      cleanUp: () => '', // need to feed a cleanup function to avoid state update on unmounted component\n    });\n  }, []);\n\n  const deleteUser = useCallback(\n    () => removeUser(channelList, setError),\n    [channelList, setError],\n  );\n\n  const getSubmitAction = useCallback(() => {\n    switch (\n      popupDetails?.inputsToSubmit // get submit action based which popupDetails is active\n    ) {\n      case 'new_username':\n        return updateUsername;\n      case 'new_email':\n        return updateEmail;\n      case 'new_password':\n        return updatePassword;\n      case 'delete':\n        return deleteUser;\n      default:\n    }\n  }, [\n    updateUsername,\n    updatePassword,\n    updateEmail,\n    deleteUser,\n    popupDetails?.inputsToSubmit,\n  ]);\n\n  return (\n    <>\n      <section className=\"my_account\">\n        <header>\n          <h2>My Account</h2>\n        </header>\n        <div className=\"inner-content\">\n          <div className=\"field-list\">\n            <Field\n              item=\"username\"\n              display={user.displayName}\n              onClick={editUsername}\n            />\n            <Field\n              item=\"email\"\n              display={user.email}\n              onClick={editEmail}\n            />\n          </div>\n          <Divider />\n          <PasswordSection editPassword={editPassword} />\n          <Divider />\n          <AccountRemoval deleteAcc={deleteAcc} />\n        </div>\n      </section>\n      {popupDetails && (\n        <Modal\n          close={() => {\n            setPopupDetails();\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setPopupDetails();\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            {...popupDetails}\n            submitAction={getSubmitAction()}\n            isMobile={true}\n            inputValues={inputValues}\n            setError={setError}\n          ></Popup>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default MyAccount;\n","import React, { useContext, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { logout } from '../../logic/user_firebaseStuff';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Settings from '../Settings/Settings _mobile';\nimport MyAccount from './MyAccount _mobile';\nimport UserProfile from './UserProfile';\nimport Error from '../Error';\n\nconst UserSettings = ({ close }) => {\n  const { SetError } = useContext(ErrorContext);\n  const [state, dispatch] = useReducer((state, action) => {\n    if (action.type === 'swap_to') {\n      switch (action.payload) {\n        case 'my account':\n          return 'my account';\n        case 'user profile':\n          return 'user profile';\n        case 'log out':\n          (async function onLogout() {\n            try {\n              await logout();\n            } catch (error) {\n              SetError(error.message);\n            }\n          })();\n          break;\n        default:\n          throw new Error(\"that doesn't exist!\");\n      }\n    }\n  }, 'my account');\n\n  return (\n    <Settings\n      close={close}\n      categories={['user settings', 'none']}\n      btnList={[\n        createSettingsButtonDetails('my account', 'user settings'),\n        createSettingsButtonDetails('user profile', 'user settings'),\n        createSettingsButtonDetails('log out', 'none'),\n      ]}\n      dispatch={dispatch}\n    >\n      {state &&\n        {\n          'my account': (\n            <MyAccount\n              editProfile={() =>\n                dispatch({ type: 'swap_to', payload: 'user profile' })\n              }\n            />\n          ),\n          'user profile': <UserProfile isMobile={true} />,\n        }[state]}\n    </Settings>\n  );\n};\n\nexport default UserSettings;\n\nfunction createSettingsButtonDetails(text, category) {\n  return {\n    text,\n    category,\n  };\n}\n\nUserSettings.propTypes = {\n  close: PropTypes.func,\n};\n","import React, {\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n  useContext,\n} from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport {\n  getPublicChannels,\n  searchPublicChannels,\n} from '../../logic/channel_firebaseStuff';\nimport useTouchEvents from '../../logic/custom-hooks/useTouchEvents';\n\nimport Sidebar from '../Settings/Sidebar';\nimport UserInfo from '../UserInfo/UserInfo_mobile';\nimport ChannelCard from './ChannelCard';\nimport NavBtn from '../NavBtn';\nimport BannerSearch from './BannerSearch';\nimport LoadingScreen from '../LoadingScreen';\nimport MainNav from '../MainNav/MainNav_mobile';\nimport MobileSidebar from '../MobileSidebar';\nimport CreateChannel from '../CreateChannel/CreateChannel';\nimport UserSettings from '../UserInfo/UserSettings_mobile';\n\nimport prevSVG from '../../assets/svg/arrow-left-s-line.svg';\nimport nextSVG from '../../assets/svg/arrow-right-s-line.svg';\n\nimport '../../styles/Explore.css';\n\nconst Explore = ({ finishLoading }) => {\n  const { setError } = useContext(ErrorContext);\n  const [publicChannelList, setPublicChannelList] = useState([]);\n  const firstChannelID = useRef(null);\n  const [query, setQuery] = useState();\n  const searchedQuery = useRef();\n  const [isSearch, setIsSearch] = useState(false);\n  const scrollerRef = useRef();\n  const [loading, setLoading] = useState(true);\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  useEffect(() => finishLoading(), [finishLoading]);\n\n  const getBatchOfChannels = useCallback(\n    async (status, key) => {\n      try {\n        setLoading(true);\n        const data = await getPublicChannels(status, key);\n        if (data && status === 'init')\n          firstChannelID.current = data[0].id;\n        setPublicChannelList(data);\n        setLoading(false);\n        if (scrollerRef.current) scrollerRef.current.scrollTop = 0;\n      } catch (error) {\n        setError(error.message);\n      }\n    },\n    [setError],\n  );\n  useEffect(() => {\n    getBatchOfChannels('init');\n  }, [getBatchOfChannels, setError]);\n\n  const searchChannels = useCallback(async () => {\n    setLoading(true);\n    try {\n      if (!query) {\n        setQuery('');\n        setIsSearch(false);\n        return await getBatchOfChannels('init');\n      }\n      const data = await searchPublicChannels(query);\n      searchedQuery.current = query;\n      setLoading(false);\n      setIsSearch(true);\n      setPublicChannelList(data);\n    } catch (error) {\n      console.error(error);\n      setError(error.message);\n    }\n  }, [query, getBatchOfChannels, setError]);\n\n  const showLeftSidebar = useCallback(() => {\n    setShowSidebar(true);\n  }, []);\n  const hideLeftSidebar = useCallback(() => {\n    setShowSidebar(false);\n  }, []);\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } =\n    useTouchEvents(hideLeftSidebar, showLeftSidebar);\n\n  const [isCreateChannel, setIsCreateChannel] = useState(false);\n  const [showUserSettings, setShowUserSettings] = useState(false);\n  return (\n    <>\n      {isCreateChannel && (\n        <CreateChannel\n          isMobile={true}\n          close={() => setIsCreateChannel(false)}\n        />\n      )}\n      {showUserSettings && (\n        <UserSettings close={() => setShowUserSettings(false)} />\n      )}\n      <div\n        className=\"explore-view mobile\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <MobileSidebar\n          isLeft={true}\n          className=\"nav-ctn mobile\"\n          hide={hideLeftSidebar}\n          isVisible={showSidebar}\n        >\n          <MainNav\n            beginCreateChannel={() => setIsCreateChannel(true)}\n            isCreateChannel={isCreateChannel}\n          />\n          <nav className=\"sidebar view-sidebar\">\n            <header>\n              <h2>Discover</h2>\n            </header>\n            <Sidebar\n              btnList={[\n                { text: 'Home', isDefault: true },\n                { text: 'Gaming' },\n                { text: 'Technology' },\n              ]}\n            />\n            <UserInfo\n              showSettings={() => setShowUserSettings(true)}\n            />\n          </nav>\n        </MobileSidebar>\n        <main>\n          <header>\n            <BannerSearch\n              onSearch={searchChannels}\n              handleChange={(e) => setQuery(e.target.value)}\n              cancelSearch={() => {\n                setIsSearch(false);\n                setQuery('');\n                getBatchOfChannels('init');\n              }}\n              query={query}\n            />\n          </header>\n          <div className=\"content\">\n            {isSearch ? (\n              <div className=\"text-wrapper\">\n                <h3>\n                  Search results for: &#8220;{searchedQuery.current}\n                  &#8221;\n                </h3>\n              </div>\n            ) : (\n              <div className=\"page-navigation\">\n                <div className=\"btn-ctn\">\n                  <NavBtn\n                    icon={prevSVG}\n                    text={'Prev'}\n                    className={\n                      !publicChannelList\n                        ? 'default_transition inactive'\n                        : publicChannelList.find(\n                            (c) => c.id === firstChannelID.current,\n                          )\n                        ? 'default_transition inactive'\n                        : 'default_transition'\n                    }\n                    onClick={() =>\n                      getBatchOfChannels(\n                        'prev',\n                        publicChannelList[0].id,\n                      )\n                    }\n                  />\n                  <NavBtn\n                    icon={nextSVG}\n                    text={'Next'}\n                    className={\n                      !publicChannelList\n                        ? 'flex-reverse default_transition inactive'\n                        : publicChannelList.length % 20 !== 0 ||\n                          publicChannelList.length === 0\n                        ? 'flex-reverse default_transition inactive'\n                        : 'flex-reverse default_transition'\n                    }\n                    onClick={() =>\n                      getBatchOfChannels(\n                        'next',\n                        publicChannelList[\n                          publicChannelList.length - 1\n                        ].id,\n                      )\n                    }\n                  />\n                </div>\n              </div>\n            )}\n            <div className=\"publicChannels-ctn\">\n              {loading ? (\n                <LoadingScreen />\n              ) : (\n                <div className=\"scroller\" ref={scrollerRef}>\n                  <div className=\"scroller-content\">\n                    <ol>\n                      {publicChannelList &&\n                        publicChannelList.map((c) => (\n                          <Link to={`/channels/${c.id}`} key={c.id}>\n                            <ChannelCard channel={c} />\n                          </Link>\n                        ))}\n                    </ol>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </>\n  );\n};\n\nexport default Explore;\n\nExplore.propTypes = {\n  finishLoading: PropTypes.func,\n};\n"],"sourceRoot":""}