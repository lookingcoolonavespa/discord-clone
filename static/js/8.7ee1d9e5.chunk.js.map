{"version":3,"sources":["components/Settings/Settings_desktop.js","components/Explore/ChannelCard.js","components/NavBtn.js","assets/svg/arrow-left-s-line.svg","assets/svg/arrow-right-s-line.svg","components/MainNav/MainNav_desktop.js","components/UserInfo/MyAccount_desktop.js","components/UserInfo/UserSettings_desktop.js","components/UserInfo/UserInfo_desktop.js","assets/svg/search-line.svg","components/Explore/BannerSearch.js","components/Explore/Explore_desktop.js"],"names":["Settings","close","children","props","ReactDOM","createPortal","className","svg","closeSVG","onClick","document","querySelector","ChannelCard","channel","img","icon","channelName","name","description","NavBtn","text","style","type","src","alt","MainNav","visitingChannel","useState","isCreateChannel","setIsCreateChannel","history","useHistory","id","plusSVG","active","tooltipText","compassSVG","location","pathname","includes","push","MyAccount","editProfile","setUser","useContext","UserContext","setError","ErrorContext","channelList","popupDetails","setPopupDetails","useInputValues","inputValues","handleChange","resetInputValues","editUsername","useCallback","title","subheader","fields","label","inputsToSubmit","updateUsername","a","updateUserInfo","new_username","editEmail","updateEmail","new_email","editPassword","updatePassword","new_password","deleteAcc","actionBtnText","cleanUp","deleteUser","removeUser","getSubmitAction","AccountProfileCard","Divider","PasswordSection","AccountRemoval","Modal","Popup","submitAction","UserSettings","SetError","useReducer","state","action","payload","onLogout","logout","message","Error","dispatch","categories","btnList","createSettingsButtonDetails","UserProfile","category","isDefault","UserInfo","user","isSettings","setIsSettings","Avatar","photoURL","color","displayName","IconBtn","settingsSVG","BannerSearch","query","onSearch","cancelSearch","backgroundImage","bannerBG","value","onKeyUp","e","key","onChange","searchSVG","Explore","finishLoading","publicChannelList","setPublicChannelList","firstChannelID","useRef","setQuery","searchedQuery","isSearch","setIsSearch","scrollerRef","loading","setLoading","useEffect","getBatchOfChannels","status","getPublicChannels","data","current","scrollTop","searchChannels","searchPublicChannels","console","error","target","prevSVG","find","c","nextSVG","length","ref","map","to"],"mappings":"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","file":"static/js/8.7ee1d9e5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Sidebar from './Sidebar';\nimport IconBtn from '../IconBtn';\n\nimport closeSVG from '../../assets/svg/close-line.svg';\n\nimport '../../styles/Settings.css';\n\nconst Settings = ({ close, children, ...props }) => {\n  return ReactDOM.createPortal(\n    <div className=\"settings\">\n      <div className=\"sidebar-region\">\n        <div className=\"sidebar-scroller\">\n          <Sidebar {...props}></Sidebar>\n        </div>\n      </div>\n      <div className=\"content-region\">\n        <div className=\"content-transition-wrapper\">\n          <div className=\"content-scroller\">\n            <main className=\"content\">{children}</main>\n            <div className=\"actions\">\n              <IconBtn svg={closeSVG} onClick={close} className={'close-btn'} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.querySelector('body')\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport Avatar from '../Avatar';\n\nimport '../../styles/ChannelCard.css';\n\nconst ChannelCard = ({ channel }) => {\n  return (\n    <div className=\"channel-info-card default_transition\">\n      <header>\n        <div className=\"channel-main-info\">\n          <Avatar img={channel.icon} channelName={channel.name} />\n          <div className=\"channel-name-wrapper\">{channel.name}</div>\n        </div>\n      </header>\n      <div className=\"content\">\n        <div className=\"channel-desc-wrapper\">{channel.description}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChannelCard;\n","import React from 'react';\n\nconst NavBtn = ({ icon, text, className, style, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      className={className ? `${className} nav-btn` : 'nav-btn'}\n      style={style}\n      onClick={onClick}\n    >\n      <div className=\"icon-wrapper\">\n        <img src={icon} alt={text} />\n      </div>\n      <div className=\"text-wrapper\">{text}</div>\n    </button>\n  );\n};\n\nexport default NavBtn;\n","export default __webpack_public_path__ + \"static/media/arrow-left-s-line.27e63cb8.svg\";","export default __webpack_public_path__ + \"static/media/arrow-right-s-line.5e3e4e57.svg\";","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ChannelList from './ChannelList';\n\nimport '../../styles/MainNav.css';\nimport ChannelListHeader from './ChannelListHeader';\nimport MainNavBtn from './MainNavBtn';\nimport CreateChannel from '../CreateChannel/CreateChannel';\n\nimport plusSVG from '../../assets/svg/add-line.svg';\nimport compassSVG from '../../assets/svg/compass-3-fill.svg';\n\nconst MainNav = ({ visitingChannel }) => {\n  const [isCreateChannel, setIsCreateChannel] = useState(false);\n\n  const history = useHistory();\n  return (\n    <>\n      <nav id=\"main-nav\">\n        <ChannelListHeader visitingChannel={visitingChannel} />\n        <div className=\"scroller\">\n          <ChannelList />\n          <div className=\"btn-ctn\">\n            <MainNavBtn\n              svg={plusSVG}\n              active={isCreateChannel}\n              onClick={() => setIsCreateChannel(true)}\n              tooltipText={'Create a channel'}\n            />\n            {/* add a server */}\n            <MainNavBtn\n              svg={compassSVG}\n              active={history.location.pathname.includes('explore')}\n              onClick={() => history.push('/explore')}\n              tooltipText={'Explore public channels'}\n            />\n          </div>\n          {/* explore servers */}\n        </div>\n      </nav>\n      {isCreateChannel && (\n        <CreateChannel close={() => setIsCreateChannel(false)} />\n      )}\n    </>\n  );\n};\n\nexport default MainNav;\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\n\nimport { updateUserInfo, removeUser } from '../../logic/user_firebaseStuff';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport { UserContext } from '../../logic/contexts/UserContext';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport AccountProfileCard from './AccountProfileCard';\nimport Divider from '../Settings/Divider';\nimport PasswordSection from './PasswordSection';\nimport AccountRemoval from './AccountRemoval';\nimport Modal from '../Modal';\nimport Popup from '../Popup';\n\nconst MyAccount = ({ editProfile }) => {\n  const { setUser } = useContext(UserContext);\n  const { setError } = useContext(ErrorContext);\n  const { channelList } = useContext(UserContext);\n\n  const [popupDetails, setPopupDetails] = useState();\n  const { inputValues, handleChange, resetInputValues } = useInputValues();\n\n  const editUsername = useCallback(() => {\n    setPopupDetails({\n      title: 'Change your username',\n      subheader: 'Enter a new username and your existing password',\n      fields: [\n        { label: 'username', name: 'new_username', type: 'text' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_username',\n    });\n  }, []);\n  const updateUsername = useCallback(async () => {\n    await updateUserInfo(\n      'displayName',\n      inputValues.new_username,\n      setUser,\n      channelList\n    );\n  }, [inputValues.new_username, setUser, channelList]);\n\n  const editEmail = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter a new email address and your existing password',\n      fields: [\n        { label: 'email', name: 'new_email', type: 'email' },\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_email',\n    });\n  }, []);\n  const updateEmail = useCallback(async () => {\n    await updateUserInfo('email', inputValues.new_email, setUser);\n  }, [inputValues.new_email, setUser]);\n\n  const editPassword = useCallback(() => {\n    setPopupDetails({\n      title: 'Enter an email address',\n      subheader: 'Enter your current password and a new password',\n      fields: [\n        {\n          label: 'current password',\n          name: 'current_password',\n          type: 'password',\n        },\n        { label: 'new password', name: 'new_password', type: 'password' },\n        {\n          label: 'confirm new password',\n          name: 'confirm_password',\n          type: 'password',\n        },\n      ],\n      inputsToSubmit: 'new_password',\n    });\n  }, []);\n  const updatePassword = useCallback(async () => {\n    await updateUserInfo('password', inputValues.new_password);\n  }, [inputValues.new_password]);\n\n  const deleteAcc = useCallback(() => {\n    setPopupDetails({\n      title: 'Delete Account',\n      subheader:\n        'Are you sure you want to delete your account? This will immediately log you out of your account and you will not be able to log in again. Forever.',\n      fields: [\n        {\n          label: 'password',\n          name: 'password',\n          type: 'password',\n        },\n      ],\n      actionBtnText: 'Delete Account',\n      inputsToSubmit: 'delete',\n      cleanUp: () => '', // need to feed a cleanup function to avoid state update on unmounted component\n    });\n  }, []);\n\n  const deleteUser = useCallback(\n    () => removeUser(channelList, setError),\n    [channelList, setError]\n  );\n\n  const getSubmitAction = useCallback(() => {\n    switch (\n      popupDetails?.inputsToSubmit //get submit action based which popupDetails is active\n    ) {\n      case 'new_username':\n        return updateUsername;\n      case 'new_email':\n        return updateEmail;\n      case 'new_password':\n        return updatePassword;\n      case 'delete':\n        return deleteUser;\n      default:\n        return;\n    }\n  }, [\n    updateUsername,\n    updatePassword,\n    updateEmail,\n    deleteUser,\n    popupDetails?.inputsToSubmit,\n  ]);\n\n  return (\n    <>\n      <section className=\"my_account\">\n        <header>\n          <h2>My Account</h2>\n        </header>\n        <div className=\"inner-content\">\n          <AccountProfileCard\n            editProfile={editProfile}\n            editUsername={editUsername}\n            editEmail={editEmail}\n          />\n          <Divider />\n          <PasswordSection editPassword={editPassword} />\n          <Divider />\n          <AccountRemoval deleteAcc={deleteAcc} />\n        </div>\n      </section>\n      {popupDetails && (\n        <Modal\n          close={() => {\n            setPopupDetails();\n            resetInputValues();\n          }}\n        >\n          <Popup\n            close={() => {\n              setPopupDetails();\n              resetInputValues();\n            }}\n            handleChange={handleChange}\n            className=\"settings-popup\"\n            {...popupDetails}\n            submitAction={getSubmitAction()}\n            inputValues={inputValues}\n            setError={setError}\n          ></Popup>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default MyAccount;\n","import React, { useContext, useReducer } from 'react';\n\nimport { logout } from '../../logic/user_firebaseStuff';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport Settings from '../Settings/Settings_desktop';\nimport MyAccount from './MyAccount_desktop';\nimport UserProfile from './UserProfile';\nimport Error from '../Error';\n\nconst UserSettings = ({ close }) => {\n  const { SetError } = useContext(ErrorContext);\n  const [state, dispatch] = useReducer((state, action) => {\n    if (action.type === 'swap_to') {\n      switch (action.payload) {\n        case 'my account':\n          return 'my account';\n        case 'user profile':\n          return 'user profile';\n        case 'log out':\n          onLogout();\n          async function onLogout() {\n            try {\n              await logout();\n            } catch (error) {\n              SetError(error.message);\n            }\n          }\n          break;\n        default:\n          throw new Error(\"that doesn't exist!\");\n      }\n    }\n  }, 'my account');\n\n  return (\n    <Settings\n      close={close}\n      categories={['user settings', 'none']}\n      btnList={[\n        createSettingsButtonDetails('my account', 'user settings', true),\n        createSettingsButtonDetails('user profile', 'user settings'),\n        createSettingsButtonDetails('log out', 'none'),\n      ]}\n      dispatch={dispatch}\n    >\n      {state &&\n        {\n          'my account': (\n            <MyAccount\n              editProfile={() =>\n                dispatch({ type: 'swap_to', payload: 'user profile' })\n              }\n            />\n          ),\n          'user profile': <UserProfile />,\n        }[state]}\n    </Settings>\n  );\n};\n\nexport default UserSettings;\n\nfunction createSettingsButtonDetails(text, category, isDefault) {\n  return {\n    text,\n    category,\n    isDefault,\n  };\n}\n","import React, { useContext, useState } from 'react';\n\nimport { UserContext } from '../../logic/contexts/UserContext';\n\nimport Avatar from '../Avatar';\nimport IconBtn from '../IconBtn';\nimport UserSettings from './UserSettings_desktop';\n\nimport settingsSVG from '../../assets/svg/settings-3-fill.svg';\n\nimport '../../styles/UserInfo.css';\n\nconst UserInfo = () => {\n  const { user } = useContext(UserContext);\n  const [isSettings, setIsSettings] = useState(false);\n  return (\n    <>\n      <section className=\"user-info-panel\">\n        <div className=\"ctn\">\n          <Avatar img={user.photoURL} color={user.color} />\n          <div className=\"name-tag\">\n            <div className=\"username-wrapper\">{user.displayName}</div>\n          </div>\n          <div className=\"btn-ctn\">\n            <IconBtn\n              svg={settingsSVG}\n              onClick={() => {\n                setIsSettings(true);\n              }}\n            />\n          </div>\n        </div>\n      </section>\n      {isSettings && <UserSettings close={() => setIsSettings(false)} />}\n    </>\n  );\n};\n\nexport default UserInfo;\n","export default __webpack_public_path__ + \"static/media/search-line.9477a86b.svg\";","import React from 'react';\n\nimport searchSVG from '../../assets/svg/search-line.svg';\nimport bannerBG from '../../assets/png/Waffle_Coffee_Dessert.png';\nimport closeSVG from '../../assets/svg/close-circle-fill.svg';\n\nconst BannerSearch = ({ query, onSearch, handleChange, cancelSearch }) => {\n  return (\n    <div\n      className=\"container\"\n      style={{\n        backgroundImage: `url(${bannerBG})`,\n      }}\n    >\n      <h3>Find your community on bread</h3>\n      <div className=\"subheader\">\n        From gaming, to music, to learning, there's a place for you\n      </div>\n      <div className=\"search\">\n        <div className=\"searchBar\">\n          <div className=\"input-wrapper\">\n            <input\n              type=\"text\"\n              value={query}\n              onKeyUp={(e) => {\n                if (e.key === 'Enter') onSearch();\n              }}\n              onChange={handleChange}\n            />\n          </div>\n          {query ? (\n            <img\n              src={closeSVG}\n              alt=\"cancel search\"\n              className=\"icon-btn\"\n              onClick={cancelSearch}\n            />\n          ) : (\n            <img src={searchSVG} alt=\"search\" />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BannerSearch;\n","import React, {\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n  useContext,\n} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport {\n  getPublicChannels,\n  searchPublicChannels,\n} from '../../logic/channel_firebaseStuff';\n\nimport Sidebar from '../Settings/Sidebar';\nimport UserInfo from '../UserInfo/UserInfo_desktop';\nimport ChannelCard from './ChannelCard';\nimport NavBtn from '../NavBtn';\nimport BannerSearch from './BannerSearch';\nimport LoadingScreen from '../LoadingScreen';\nimport MainNav from '../MainNav/MainNav_desktop';\n\nimport prevSVG from '../../assets/svg/arrow-left-s-line.svg';\nimport nextSVG from '../../assets/svg/arrow-right-s-line.svg';\n\nimport '../../styles/Explore.css';\n\nconst Explore = ({ finishLoading }) => {\n  const { setError } = useContext(ErrorContext);\n  const [publicChannelList, setPublicChannelList] = useState([]);\n  const firstChannelID = useRef(null);\n  const [query, setQuery] = useState();\n  const searchedQuery = useRef();\n  const [isSearch, setIsSearch] = useState(false);\n  const scrollerRef = useRef();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => finishLoading(), [finishLoading]);\n\n  const getBatchOfChannels = useCallback(\n    async (status, key) => {\n      try {\n        setLoading(true);\n        const data = await getPublicChannels(status, key);\n        if (data && status === 'init') firstChannelID.current = data[0].id;\n        setPublicChannelList(data);\n        setLoading(false);\n        if (scrollerRef.current) scrollerRef.current.scrollTop = 0;\n      } catch (error) {\n        setError(error.message);\n      }\n    },\n    [setError]\n  );\n  useEffect(() => {\n    getBatchOfChannels('init');\n  }, [getBatchOfChannels, setError]);\n\n  const searchChannels = useCallback(async () => {\n    setLoading(true);\n    try {\n      if (!query) {\n        setQuery('');\n        setIsSearch(false);\n        return await getBatchOfChannels('init');\n      }\n      const data = await searchPublicChannels(query);\n      searchedQuery.current = query;\n      setLoading(false);\n      setIsSearch(true);\n      setPublicChannelList(data);\n    } catch (error) {\n      console.error(error);\n      setError(error.message);\n    }\n  }, [query, getBatchOfChannels, setError]);\n\n  return (\n    <div className=\"explore-view\">\n      <div className=\"nav-ctn\">\n        <MainNav />\n        <nav className=\"sidebar view-sidebar\">\n          <header>\n            <h2>Discover</h2>\n          </header>\n          <Sidebar\n            btnList={[\n              { text: 'Home', isDefault: true },\n              { text: 'Gaming' },\n              { text: 'Technology' },\n            ]}\n          />\n          <UserInfo />\n        </nav>\n      </div>\n      <main>\n        <header>\n          <BannerSearch\n            onSearch={searchChannels}\n            handleChange={(e) => setQuery(e.target.value)}\n            cancelSearch={() => {\n              setIsSearch(false);\n              setQuery('');\n              getBatchOfChannels('init');\n            }}\n            query={query}\n          />\n        </header>\n        <div className=\"content\">\n          {isSearch ? (\n            <div className=\"text-wrapper\">\n              <h3>Search results for: \"{searchedQuery.current}\"</h3>\n            </div>\n          ) : (\n            <div className=\"page-navigation\">\n              <div className=\"btn-ctn\">\n                <NavBtn\n                  icon={prevSVG}\n                  text={'Prev'}\n                  className={\n                    !publicChannelList\n                      ? 'default_transition inactive'\n                      : publicChannelList.find(\n                          (c) => c.id === firstChannelID.current\n                        )\n                      ? 'default_transition inactive'\n                      : 'default_transition'\n                  }\n                  onClick={() =>\n                    getBatchOfChannels('prev', publicChannelList[0].id)\n                  }\n                />\n                <NavBtn\n                  icon={nextSVG}\n                  text={'Next'}\n                  className={\n                    !publicChannelList\n                      ? 'flex-reverse default_transition inactive'\n                      : publicChannelList.length % 20 !== 0 ||\n                        publicChannelList.length === 0\n                      ? 'flex-reverse default_transition inactive'\n                      : 'flex-reverse default_transition'\n                  }\n                  onClick={() =>\n                    getBatchOfChannels(\n                      'next',\n                      publicChannelList[publicChannelList.length - 1].id\n                    )\n                  }\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"publicChannels-ctn\">\n            {loading ? (\n              <LoadingScreen />\n            ) : (\n              <div className=\"scroller\" ref={scrollerRef}>\n                <div className=\"scroller-content\">\n                  <ol>\n                    {publicChannelList &&\n                      publicChannelList.map((c) => (\n                        <Link to={`/channels/${c.id}`} key={c.id}>\n                          <ChannelCard channel={c} />\n                        </Link>\n                      ))}\n                  </ol>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Explore;\n"],"sourceRoot":""}