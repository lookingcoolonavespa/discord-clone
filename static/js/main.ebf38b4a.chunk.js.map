{"version":3,"sources":["firebaseStuff.js","logic/user_firebaseStuff.js","logic/contexts/ErrorContext.js","logic/formValidation.js","logic/custom-hooks/useInputError.js","components/Form.js","logic/channel_firebaseStuff.js","logic/custom-hooks/useInputValues.js","components/LoadingEllipsis.js","components/FlatBtn.js","logic/Import.js","logic/contexts/UserContext.js","components/Error.js","logic/custom-hooks/useSuccess.js","components/Success.js","assets/png/Waffle_Coffee_Dessert.png","components/LoadingScreen.js","components/Input.js","components/InputField.js","logic/custom-hooks/useMobileCheck.js","logic/room_firebaseStuff.js","assets/svg/check-line.svg","components/Login/LoginEmail.js","components/Login/LoginNewUser.js","components/Login/CreateAcc.js","components/Login/ResetPassword.js","components/Login/LoginScreen.js","App.js","logic/custom-hooks/useError.js","logic/custom-hooks/useLoginUser.js","index.js"],"names":["initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","getDatabase","storage","getStorage","generateRandomUser","setUser","a","rdmName","uniqueNamesGenerator","dictionaries","adjectives","colors","animals","createUser","sendPWResetEmail","email","auth","getAuth","sendPasswordResetEmail","detachListenersForUser","uid","channelListRef","ref","off","uploadAvatar","image","userAvatarRef","store","uploadBytes","getDownloadURL","avatarURL","updateUserInfo","infoType","value","channelList","user","currentUser","updateProfile","displayName","photoURL","updateUserProfileColor","updateEmail","updatePassword","length","updateObj","updateUserInfoForAllChannels","reload","color","defaultColors","Math","floor","random","userRef","update","forEach","c","id","removeUser","setError","deleteUser","set","message","password","channelID","createUserWithEmailAndPassword","userCredential","profileColor","subscribeToChannel","signIn","signInWithEmailAndPassword","role","updates","avatar","getUserInfo","setChannelList","setUserProfileColor","setMentioned","onValue","snap","updateChannelList","updateChannelListWithInfo","type","vals","v","i","data","channels","push","Promise","all","getInfoForChannelList","val","mentions","updateUserOnline","userChannelList","connectedRef","channel","userStatusRef","snapshot","onDisconnect","status","updateMentions","roomID","msgID","mentionsRef","dealWithReadMentions","isUserOnline","get","verifyPW","pw","isValid","credential","EmailAuthProvider","reauthenticateWithCredential","error","logout","signOut","ErrorContext","createContext","validateEmail","test","validatePW","confirmPW","otherPW","dynamicValidation","el","isSubmit","undefined","name","includes","pwValidation","useInputError","inputNames","useState","reduce","acc","curr","inputError","setInputError","validateInput","pwConfirm","validationStatus","prev","e","submitAction","cleanUp","preventDefault","elements","target","errors","fname","currEl","namedItem","submitForm","Form","fields","inputValues","actionBtnText","noCancelBtn","cancelBtnText","textBtns","handleChange","close","formRef","useRef","fieldNames","map","f","loading","setLoading","isMounted","useEffect","current","autoComplete","onSubmit","className","hidden","idx","InputField","autoFocus","onBlur","label","onChange","FlatBtn","text","isUnderline","onClick","b","uniqid","createChannel","isPublic","icon","newChannelRef","changeChannelIcon","key","iconURL","description","createRoom","searchPublicChannels","searchVal","query","orderByChild","startAt","processed","Object","keys","getPublicChannels","limitToFirst","orderByKey","startAfter","endBefore","limitToLast","channelIconRef","imageURL","detachListenersForChannel","channelInfoRef","getChannelInfo","updateChannel","setRoomCategories","setRoomList","setUserRoles","setUserList","setOnlineUsers","channelRef","roomCategories","room_categories","roomListArr","pushToRoomListArr","rooms","userRoles","user_roles","userList","userInfo","pushToUserListArr","users","onlineUsers","filter","category","channelRoomListRef","newRoomRef","infoRef","Error","resultArr","result","getInfoForVisitingChannel","createRoomCategory","channelRoomCategoriesRef","updateCategoryOfRoom","channelRoomRef","updateRoomName","deleteRoom","createUserRole","channelUserRolesRef","beginUpload","file","storageRef","uploadBytesResumable","listenToUploadProgress","task","setProgress","on","progress","round","bytesTransferred","totalBytes","useInputValues","setInputValues","resetInputValues","LoadingEllipsis","size","Import","isMobile","mobile","desktop","children","Component","setComponent","importCallback","componentDetails","default","UserContext","errorMsg","ReactDOM","createPortal","document","querySelector","useSuccess","success","setSuccess","setTimeout","Success","src","checkSVG","alt","LoadingScreen","Input","props","inputProps","useMobileCheck","window","innerWidth","windowWidth","setWindowWidth","isMobileCheck","handleWindowResize","addEventListener","removeEventListener","detachListenersForRoom","roomRef","getRoomStuff","setRoomName","setMsgList","finishLoading","updateMsgList","changeReplyFromIDtoMsgObj","arr","obj","thisArr","replyTo","find","msgObj","msgId","messages","msgList","pushToMsgList","roomId","roomMsgList","newMsgRef","LoginEmail","onRegister","onForgotPW","useContext","history","useHistory","pushWelcomeMsg","msg","timestamp","getUnixTime","Date","range","offset","LoginNewUser","onContinue","onReturningUser","CreateAcc","newUserInfo","goBack","username","ResetPassword","setEmail","LoginScreen","node","setNode","useParams","goHome","loginArtwork","App","useError","mentioned","location","useLocation","onAuthStateChanged","currUser","replace","pathname","defaultRoomID","defaultRoom","useLoginUser","useCallback","Provider","path","Explore","ChannelView","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebf38b4a.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getDatabase } from 'firebase/database';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC8GZMfCxqOUIFsa2OYlXcMzfQKfAobukQ',\n\n  authDomain: 'bread-8adf4.firebaseapp.com',\n\n  databaseURL: 'https://bread-8adf4-default-rtdb.firebaseio.com',\n\n  projectId: 'bread-8adf4',\n\n  storageBucket: 'bread-8adf4.appspot.com',\n\n  messagingSenderId: '163895954776',\n\n  appId: '1:163895954776:web:81bdb5187f320d28a4692d',\n};\n\ninitializeApp(firebaseConfig);\nconst db = getDatabase();\nconst storage = getStorage();\n\nexport { db, storage };\n\n//login user\n// pull Channels user is subscribed to\n// can pull all the rooms too\n\n// when user clicks on a room, pull messages\n","import {\n  ref,\n  set,\n  get,\n  update,\n  onValue,\n  off,\n  onDisconnect,\n} from 'firebase/database';\nimport {\n  getAuth,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  updateEmail,\n  updatePassword,\n  deleteUser,\n  signInWithEmailAndPassword,\n  sendPasswordResetEmail,\n  reauthenticateWithCredential,\n  EmailAuthProvider,\n  reload,\n  signOut,\n} from 'firebase/auth';\nimport { ref as store, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { getInfoForChannelList } from './channel_firebaseStuff';\nimport { db, storage } from '../firebaseStuff';\nimport {\n  uniqueNamesGenerator,\n  adjectives,\n  colors,\n  animals,\n} from 'unique-names-generator';\n\nasync function generateRandomUser(setUser) {\n  const rdmName = uniqueNamesGenerator({\n    dictionaries: [adjectives, colors, animals],\n  });\n  return await createUser(\n    `${rdmName}@email.com`,\n    rdmName,\n    rdmName,\n    null,\n    setUser\n  );\n}\n\nfunction sendPWResetEmail(email) {\n  const auth = getAuth();\n  sendPasswordResetEmail(auth, email);\n}\n\nfunction detachListenersForUser(uid) {\n  const channelListRef = ref(db, `users/${uid}/channels`);\n\n  off(channelListRef);\n}\n\nasync function uploadAvatar(uid, image) {\n  const userAvatarRef = store(storage, `user_avatars/${uid}`);\n  await uploadBytes(userAvatarRef, image);\n  const avatarURL = await getDownloadURL(userAvatarRef);\n  return avatarURL;\n}\n\nasync function updateUserInfo(infoType, value, setUser, channelList) {\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  switch (infoType) {\n    case 'displayName': {\n      await updateProfile(user, { displayName: value });\n      break;\n    }\n    case 'avatar': {\n      await updateProfile(user, { photoURL: value });\n      break;\n    }\n    case 'color': {\n      await updateUserProfileColor(user.uid, value);\n      break;\n    }\n    case 'email': {\n      await updateEmail(user, value);\n      break;\n    }\n    case 'password': {\n      await updatePassword(user, value);\n      break;\n    }\n    default: {\n      return;\n    }\n  }\n  if (channelList && channelList.length > 0) {\n    const updateObj = { [infoType]: value };\n    updateUserInfoForAllChannels(user.uid, channelList, updateObj);\n  }\n\n  await reload(user);\n  setUser(user);\n  return;\n}\nfunction updateUserProfileColor(uid, color) {\n  const defaultColors = [\n    'rgb(92, 100, 244)',\n    'rgb(237, 66, 69)',\n    'rgb(250, 166, 26)',\n  ];\n  color =\n    color || defaultColors[Math.floor(Math.random() * defaultColors.length)];\n\n  const userRef = ref(db, `users/${uid}`);\n  update(userRef, { color });\n\n  return color;\n}\nfunction updateUserInfoForAllChannels(uid, channelList, updateObj) {\n  channelList.forEach(async (c) => {\n    await update(ref(db, `Channels/${c.id}/users/${uid}`), updateObj);\n  });\n}\nasync function removeUser(channelList, setError) {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  try {\n    await deleteUser(user);\n    set(ref(db, `users/${user.uid}`), null);\n    updateUserInfoForAllChannels(user.uid, channelList, null);\n  } catch (error) {\n    setError && setError(error.message);\n  }\n}\n\nasync function createUser(email, password, displayName, channelID, setUser) {\n  const auth = getAuth();\n  const userCredential = await createUserWithEmailAndPassword(\n    auth,\n    email,\n    password\n  );\n  await updateProfile(userCredential.user, { displayName });\n  const profileColor = await updateUserProfileColor(userCredential.user.uid);\n  userCredential.user.color = profileColor;\n\n  if (channelID) subscribeToChannel(userCredential.user, channelID);\n\n  setUser && setUser(userCredential.user);\n\n  return userCredential.user;\n}\n\nasync function signIn(email, password) {\n  const auth = getAuth();\n  await signInWithEmailAndPassword(auth, email, password);\n}\n\nasync function subscribeToChannel(user, channelID, role) {\n  let updates = {};\n  updates[`users/${user.uid}/channels/${channelID}`] = ``;\n\n  updates[`Channels/${channelID}/users/${user.uid}`] = {\n    role: role || null,\n    displayName: user.displayName,\n    avatar: user.photoURL || '',\n    color: user.color,\n  };\n\n  await update(ref(db), updates);\n}\n\nasync function getUserInfo(\n  uid,\n  setChannelList,\n  setUserProfileColor,\n  setMentioned\n) {\n  if (!uid) return;\n\n  const userRef = ref(db, `users/${uid}/`);\n  onValue(userRef, async (snap) => {\n    const data = snap.val();\n    if (!data) return;\n    setUserProfileColor(data.color);\n    updateChannelList();\n    setMentioned(data.mentions);\n    //helper\n    async function updateChannelList() {\n      let channelList = [];\n      for (const id in data.channels) {\n        channelList.push({ id, role: data.channels[id] });\n      }\n      await Promise.all([\n        getInfoForChannelList('icon', channelList, updateChannelListWithInfo),\n        getInfoForChannelList('name', channelList, updateChannelListWithInfo),\n        getInfoForChannelList(\n          'defaultRoom',\n          channelList,\n          updateChannelListWithInfo\n        ),\n      ]);\n\n      setChannelList(channelList);\n\n      //helpers\n      function updateChannelListWithInfo(type, vals) {\n        vals.forEach((v, i) => (channelList[i][type] = v));\n      }\n    }\n  });\n}\n\nfunction updateUserOnline(uid, userChannelList) {\n  const connectedRef = ref(db, '.info/connected');\n  // add user to online_users for all channels in their list\n  userChannelList.forEach((channel) => {\n    const userStatusRef = ref(db, `Channels/${channel.id}/users/${uid}`);\n\n    onValue(connectedRef, async (snapshot) => {\n      if (snapshot.val() === false) {\n        off(connectedRef);\n        detachListenersForUser(uid);\n      }\n\n      await onDisconnect(userStatusRef).update({ status: 'offline' });\n\n      update(userStatusRef, {\n        status: 'online',\n      });\n    });\n  });\n}\n\nasync function updateMentions(uid, channelID, roomID, msgID) {\n  const mentionsRef = ref(\n    db,\n    `users/${uid}/mentions/${channelID}/${roomID}/${msgID}`\n  );\n  await set(mentionsRef, true);\n}\n\nasync function dealWithReadMentions(uid, channelID, roomID) {\n  const mentionsRef = ref(db, `users/${uid}/mentions/${channelID}/${roomID}`);\n  await set(mentionsRef, null);\n}\n\nfunction isUserOnline(uid) {\n  const userRef = ref(db, `users/${uid}/isOnline`);\n\n  return get(userRef);\n}\n\nasync function verifyPW(pw) {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  if (!user) return { isValid: true };\n  try {\n    const credential = EmailAuthProvider.credential(user.email, pw);\n\n    const status = await reauthenticateWithCredential(user, credential);\n    if (status) return { isValid: true };\n    return { error: 'something went wrong' };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\nasync function logout() {\n  const auth = getAuth();\n  signOut(auth);\n}\n\nexport {\n  uploadAvatar,\n  sendPWResetEmail,\n  updateUserInfoForAllChannels,\n  updateUserProfileColor,\n  updateUserInfo,\n  getUserInfo,\n  createUser,\n  signIn,\n  isUserOnline,\n  dealWithReadMentions,\n  subscribeToChannel,\n  updateUserOnline,\n  updateMentions,\n  detachListenersForUser,\n  verifyPW,\n  removeUser,\n  logout,\n  generateRandomUser,\n};\n","import { createContext } from 'react';\n\nexport const ErrorContext = createContext(null);\n","import { verifyPW } from './user_firebaseStuff';\n\nfunction validateEmail(email) {\n  const regX = /\\S+@\\S+\\.\\S+/;\n  return regX.test(email) ? { isValid: true } : { error: 'Not a valid email' };\n}\n\nfunction validatePW(pw) {\n  // if (!/[A-Z]/.test(pw))\n  //   return {\n  //     isValid: false,\n  //     error: 'Must include uppercase',\n  //   };\n  // if (!/[a-z]/.test(pw))\n  //   return {\n  //     isValid: false,\n  //     error: 'Must include lowercase',\n  //   };\n  // if (!/[0-9]/.test(pw))\n  //   return {\n  //     isValid: false,\n  //     error: 'Must include a number',\n  //   };\n  // if (!/[^A-Za-z0-9]/.test(pw))\n  //   return {\n  //     isValid: false,\n  //     error: 'Must include special character',\n  //   };\n  if (pw.length < 6)\n    return {\n      isValid: false,\n      error: 'Must be 6 or more in length',\n    };\n\n  return { isValid: true };\n}\n\nfunction confirmPW(pw, otherPW) {\n  return pw === otherPW\n    ? { isValid: true }\n    : { error: \"Passwords don't match\" };\n}\n\nfunction dynamicValidation(el, isSubmit = false, otherPW = undefined) {\n  switch (true) {\n    case el.name.includes('username'): {\n      return el.value.length > 0\n        ? { isValid: true }\n        : { error: 'username is empty' };\n    }\n    case el.name.includes('room_name'): {\n      return el.value.length > 0\n        ? { isValid: true }\n        : { error: 'room name is empty' };\n    }\n    case el.name.includes('email'): {\n      return validateEmail(el.value);\n    }\n\n    case el.name.includes('password'): {\n      const pwValidation = validatePW(el.value);\n      if (pwValidation.error) return pwValidation;\n\n      if (el.name === 'confirm_password') return confirmPW(el.value, otherPW);\n      if (\n        (el.name === 'current_password' || el.name === 'password') &&\n        isSubmit\n      )\n        return verifyPW(el.value); // this returns a promise\n      return { isValid: true };\n    }\n\n    default:\n      return { isValid: true };\n  }\n}\n\nexport { dynamicValidation, validateEmail, validatePW, confirmPW };\n","import { useState } from 'react';\nimport { dynamicValidation } from '../formValidation';\n\nfunction useInputError(inputNames) {\n  const [inputError, setInputError] = useState(\n    () => inputNames.reduce((acc, curr) => ({ ...acc, [curr]: '' }), {}) //turn inputNames into object keys\n  );\n\n  async function validateInput(el, isSubmit = false, pwConfirm = undefined) {\n    const validationStatus = pwConfirm\n      ? await dynamicValidation(el, isSubmit, pwConfirm)\n      : await dynamicValidation(el, isSubmit); // have to await bc it might return a promise (depends on input name)\n\n    const value = validationStatus.error ? validationStatus.error : '';\n    setInputError((prev) => ({\n      ...prev,\n      [el.name]: value,\n    }));\n\n    return validationStatus.error ? false : true;\n  }\n\n  async function submitForm(e, submitAction, cleanUp, setError) {\n    e.preventDefault();\n\n    const {\n      target: { elements }, //destructure e to get elements\n    } = e;\n\n    try {\n      let errors = false;\n      for (const fname of inputNames) {\n        //iterate through each input field and validate\n        const currEl = elements.namedItem(fname);\n        const isValid =\n          fname === 'confirm_password'\n            ? await validateInput(\n                currEl,\n                true,\n                elements.namedItem('new_password').value\n              )\n            : await validateInput(currEl, true);\n        if (!isValid) errors = true;\n      }\n      if (errors) return;\n\n      await submitAction();\n      cleanUp();\n    } catch (error) {\n      setError && setError(error.message);\n    }\n  }\n\n  return { inputError, validateInput, submitForm };\n}\n\nexport default useInputError;\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport useInputError from '../logic/custom-hooks/useInputError';\nimport uniqid from 'uniqid';\n\nimport InputField from './InputField';\nimport FlatBtn from './FlatBtn';\n\nconst Form = ({\n  fields,\n  inputValues,\n  actionBtnText,\n  noCancelBtn,\n  cancelBtnText,\n  textBtns,\n  handleChange,\n  submitAction,\n  cleanUp,\n  close,\n  setError,\n}) => {\n  const formRef = useRef();\n  const fieldNames = fields.map((f) => f.name);\n  const { inputError, validateInput, submitForm } = useInputError(fieldNames);\n  const [loading, setLoading] = useState(false);\n\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n\n  return (\n    <form\n      ref={formRef}\n      autoComplete=\"nope\"\n      onSubmit={async (e) => {\n        setLoading(true);\n        cleanUp = cleanUp ? cleanUp : close;\n        await submitForm(e, submitAction, cleanUp, setError);\n        if (isMounted.current) setLoading(false);\n      }}\n    >\n      <div className=\"content\">\n        <input type=\"password\" hidden />\n        {/*need this to turn off autocomplete */}\n        {fields.map((f, idx) => {\n          return (\n            <InputField\n              key={idx}\n              type={f.type}\n              autoFocus={idx === 0 ? true : false}\n              onBlur={\n                f.name === 'confirm_password'\n                  ? (e) =>\n                      validateInput(\n                        e.target,\n                        false,\n                        formRef.current.elements.namedItem('new_password').value\n                      )\n                  : (e) => validateInput(e.target)\n              }\n              error={inputError[f.name]}\n              label={f.label}\n              name={f.name}\n              onChange={handleChange}\n              value={inputValues[f.name] || ''}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className={loading ? 'btn-ctn no-pointer-events' : 'btn-ctn'}>\n          {!noCancelBtn && (\n            <FlatBtn\n              text={cancelBtnText ? cancelBtnText : 'Cancel'}\n              isUnderline={true}\n              onClick={close}\n            />\n          )}\n          <FlatBtn\n            type=\"submit\"\n            text={actionBtnText ? actionBtnText : 'Done'}\n            className=\"filled small\"\n            loading={loading}\n          />\n        </div>\n        {textBtns && (\n          <div className=\"text-btn-ctn\">\n            {textBtns.map((b) => {\n              return (\n                <span key={uniqid()} className=\"link\" onClick={b.onClick}>\n                  {b.text}\n                </span>\n              );\n            })}\n          </div>\n        )}\n      </footer>\n    </form>\n  );\n};\n\nexport default Form;\n","import {\n  ref,\n  push,\n  set,\n  get,\n  update,\n  onValue,\n  off,\n  query,\n  orderByKey,\n  orderByChild,\n  startAt,\n  startAfter,\n  endBefore,\n  limitToFirst,\n  limitToLast,\n} from 'firebase/database';\nimport {\n  ref as store,\n  uploadBytes,\n  uploadBytesResumable,\n  getDownloadURL,\n  deleteObject,\n} from 'firebase/storage';\nimport { db, storage } from '../firebaseStuff';\nimport { isUserOnline } from './user_firebaseStuff';\n\nasync function createSampleChannels(num) {\n  for (let i = 0; i < num; i++) {\n    await createChannel(`sample channel ${i}`, true);\n  }\n}\n\nasync function createChannel(name, isPublic, icon) {\n  const channelListRef = ref(db, 'Channels');\n  const newChannelRef = push(channelListRef);\n  await set(newChannelRef, { name });\n\n  let iconURL = icon ? await changeChannelIcon(newChannelRef.key, icon) : '';\n  if (isPublic)\n    await set(ref(db, `public_channels/${newChannelRef.key}`), {\n      name,\n      icon: iconURL,\n      description:\n        'This is a new channel and there is no description for it at the moment.',\n    });\n  await createRoom(newChannelRef.key, 'general', null);\n  return newChannelRef.key;\n}\n\nasync function deleteChannels() {\n  let updates = {};\n\n  [\n    '-Mp9N-JNC7jgBKurBZCn',\n    '-MpYOwEQmhBEBW7zWIWL',\n    '-MqCDfO8KLUpNbHiuP9q',\n    '-MqCG7RuBJ53MGGTuu7O',\n    '-MqCGdvGmSp57SUBYdVp',\n    '-MqCGh4rVYnMIiCOeokE',\n  ].forEach((key) => {\n    updates[`public_channels/${key}`] = null;\n    updates[`Channels/${key}`] = null;\n  });\n\n  update(ref(db), updates);\n}\n\nasync function searchPublicChannels(searchVal) {\n  const snap = await get(\n    query(\n      ref(db, '/public_channels/'),\n      orderByChild('name'),\n      startAt(searchVal)\n    )\n  );\n  const data = snap.val();\n  const processed = Object.keys(data).map((key) => ({ ...data[key], id: key }));\n  return processed;\n}\n\nasync function getPublicChannels(status, key) {\n  let snap;\n  switch (status) {\n    case 'init':\n      snap = await get(query(ref(db, `public_channels/`), limitToFirst(20)));\n      break;\n    case 'next':\n      snap = await get(\n        query(\n          ref(db, `public_channels/`),\n          orderByKey(),\n          startAfter(key),\n          limitToFirst(20)\n        )\n      );\n      break;\n    case 'prev':\n      snap = await get(\n        query(\n          ref(db, `public_channels/`),\n          orderByKey(),\n          endBefore(key),\n          limitToLast(20)\n        )\n      );\n      break;\n    default:\n      return;\n  }\n  const data = snap.val();\n  if (!data) return;\n  const processed = Object.keys(data).map((key) => ({ ...data[key], id: key }));\n  return processed;\n}\n\nasync function changeChannelIcon(channelID, image) {\n  const channelIconRef = store(storage, `channel_icons/${channelID}`);\n  await uploadBytes(channelIconRef, image);\n  const imageURL = await getDownloadURL(channelIconRef);\n  await update(ref(db, `Channels/${channelID}`), { icon: imageURL });\n}\n\nfunction detachListenersForChannel(channelID, uid) {\n  const channelInfoRef = ref(db, `Channels/${channelID}`);\n\n  off(channelInfoRef);\n}\n\nasync function getChannelInfo(\n  channelID,\n  updateChannel,\n  setRoomCategories,\n  setRoomList,\n  setUserRoles,\n  setUserList,\n  setOnlineUsers,\n  setError\n) {\n  try {\n    const channelRef = ref(db, `Channels/${channelID}`);\n    onValue(channelRef, (snap) => {\n      const data = snap.val();\n\n      updateChannel(data.name, data.icon || '');\n\n      const roomCategories = data.room_categories\n        ? Object.keys(data.room_categories)\n        : [];\n      setRoomCategories(['none', ...roomCategories]);\n\n      let roomListArr = [];\n      pushToRoomListArr(data.rooms);\n      setRoomList(roomListArr);\n\n      const userRoles = data.user_roles ? Object.keys(data.user_roles) : [];\n      setUserRoles([...userRoles, 'Online']);\n\n      let userList = [];\n      pushToUserListArr(data.users);\n      setUserList(userList);\n      const onlineUsers = userList.filter((user) => user.status === 'online');\n      setOnlineUsers(onlineUsers);\n\n      //helpers\n      function pushToRoomListArr(data) {\n        for (const id in data) {\n          roomListArr.push({ ...data[id], id });\n        }\n      }\n      function pushToUserListArr(data) {\n        for (const id in data) {\n          const userInfo = { ...data[id], uid: id };\n          userList.push(userInfo);\n        }\n      }\n    });\n  } catch (error) {\n    setError && setError(error.message);\n  }\n}\n\nasync function getRoomList(channelID, setRoomList, setError) {\n  try {\n    const roomListRef = ref(db, `Channels/${channelID}/rooms`);\n\n    const snap = await get(roomListRef);\n    const data = snap.val();\n\n    let roomList = [];\n    for (const id in data) {\n      roomList.push({ ...data[id], id });\n    }\n    setRoomList(roomList);\n  } catch (error) {\n    setError(error.message);\n  }\n}\n\nasync function createRoom(channelID, name, category) {\n  const channelRoomListRef = ref(db, `Channels/${channelID}/rooms`);\n  const newRoomRef = push(channelRoomListRef);\n\n  await set(newRoomRef, { name, category });\n\n  await set(ref(db, `Rooms/${newRoomRef.key}`), {\n    name,\n  });\n}\n\nasync function getInfoForChannelList(type, channelList, updateChannelList) {\n  const resultArr = await Promise.all(\n    channelList.map((channel) => {\n      let infoRef;\n      switch (type) {\n        case 'name':\n          infoRef = ref(db, `Channels/${channel.id}/name`);\n          break;\n        case 'icon':\n          infoRef = ref(db, `Channels/${channel.id}/icon`);\n          break;\n        case 'defaultRoom':\n          infoRef = query(\n            ref(db, `Channels/${channel.id}/rooms`),\n            limitToFirst(1)\n          );\n          break;\n        default:\n          throw new Error('not a valid info type');\n      }\n      return get(infoRef);\n    })\n  );\n  updateChannelList(\n    type,\n    resultArr.map((result) => result.val())\n  );\n}\n\nasync function getInfoForVisitingChannel(channelID) {\n  const resultArr = await Promise.all([\n    get(ref(db, `Channels/${channelID}/name`)),\n    get(ref(db, `Channels/${channelID}/icon`)),\n    get(query(ref(db, `Channels/${channelID}/rooms`), limitToFirst(1))),\n  ]);\n\n  return resultArr.map((result) => result.val());\n}\n\nasync function createRoomCategory(channelID, name) {\n  const channelRoomCategoriesRef = ref(\n    db,\n    `Channels/${channelID}/room_categories`\n  );\n  await update(channelRoomCategoriesRef, { [name]: true });\n}\n\nasync function updateCategoryOfRoom(channelID, roomID, category) {\n  const channelRoomRef = ref(db, `Channels/${channelID}/rooms/${roomID}`);\n  await update(channelRoomRef, { category });\n}\n\nasync function updateRoomName(channelID, roomID, name) {\n  await update(ref(db, `Channels/${channelID}/rooms/${roomID}`), { name });\n  await update(ref(db, `Rooms/${roomID}`), { name });\n}\n\nasync function deleteRoom(channelID, roomID) {\n  let updates = {};\n  updates[`Channels/${channelID}/rooms/${roomID}`] = null;\n  updates[`Rooms/${roomID}`] = null;\n  await update(ref(db), updates);\n}\n\nasync function createUserRole(channelID, role) {\n  const channelUserRolesRef = ref(db, `Channels/${channelID}/user_roles`);\n  update(channelUserRolesRef, { [role]: true });\n}\n\nasync function updateRoleOfUser(channelID, userId, role, setError) {\n  try {\n    let updates = {};\n    updates[`users/${userId}/channels/${channelID}`] = role;\n    if (isUserOnline(userId))\n      updates[`Channels/${channelID}/online_users/${userId}/role`] = role;\n\n    update(ref(db), updates);\n  } catch (error) {\n    setError && setError(error.message);\n  }\n}\n\nfunction beginUpload(file) {\n  const storageRef = store(storage, `uploadedFiles/${file.name}`);\n  return uploadBytesResumable(storageRef, file);\n}\nfunction cancelUpload(task) {\n  if (task._state) return deleteFile(task._ref);\n  task.cancel();\n}\nfunction deleteFile(ref) {\n  deleteObject(ref);\n}\nfunction listenToUploadProgress(task, setProgress) {\n  task.on('state_changed', (snap) => {\n    const progress = Math.round(\n      (snap.bytesTransferred / snap.totalBytes) * 100\n    );\n    setProgress(progress);\n  });\n}\nexport {\n  getInfoForVisitingChannel,\n  getPublicChannels,\n  createChannel,\n  changeChannelIcon,\n  getChannelInfo,\n  getInfoForChannelList,\n  getRoomList,\n  createRoomCategory,\n  updateCategoryOfRoom,\n  createRoom,\n  createUserRole,\n  updateRoleOfUser,\n  detachListenersForChannel,\n  deleteChannels,\n  searchPublicChannels,\n  beginUpload,\n  cancelUpload,\n  listenToUploadProgress,\n  deleteRoom,\n  updateRoomName,\n  createSampleChannels,\n};\n","import { useState } from 'react';\n\nexport default function useInputValues() {\n  const [inputValues, setInputValues] = useState({});\n\n  function handleChange(e) {\n    setInputValues((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  }\n\n  function resetInputValues() {\n    setInputValues({});\n  }\n\n  return { inputValues, setInputValues, handleChange, resetInputValues };\n}\n","import React from 'react';\n\nimport '../styles/LoadingEllipsis.css';\n\nconst LoadingEllipsis = ({ size }) => {\n  return (\n    <div className={size ? `lds-ellipsis ${size}` : 'lds-ellipsis'}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingEllipsis;\n","import React from 'react';\n\nimport LoadingEllipsis from './LoadingEllipsis';\n\nimport '../styles/FlatBtn.css';\n\nconst FlatBtn = ({ className, type, text, isUnderline, loading, onClick }) => {\n  return (\n    <button\n      type={type || 'button'}\n      className={className ? `flat-btn ${className}` : 'flat-btn'}\n      onClick={onClick}\n    >\n      {loading ? (\n        <LoadingEllipsis size={'small'} />\n      ) : (\n        <span className={isUnderline ? 'underline-hover' : null}>{text}</span>\n      )}\n    </button>\n  );\n};\n\nexport default FlatBtn;\n","import { useState, useEffect } from 'react';\n\nconst Import = ({ isMobile, mobile, desktop, children }) => {\n  const [Component, setComponent] = useState();\n\n  useEffect(() => {\n    const importCallback = isMobile ? mobile : desktop;\n\n    if (importCallback) {\n      (async () => {\n        const componentDetails = await importCallback();\n        setComponent(componentDetails);\n      })();\n    }\n  }, [mobile, desktop, isMobile]);\n\n  return children(Component ? Component.default : () => null);\n};\n\nexport default Import;\n","import { createContext } from 'react';\n\nexport const UserContext = createContext(null);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '../styles/Error.css';\n\nconst Error = ({ errorMsg }) => {\n  return ReactDOM.createPortal(\n    <div id=\"error-popup\">\n      <p className=\"error-msg\">\n        <i className=\"ri-close-fill\"></i> {errorMsg}\n      </p>\n    </div>,\n    document.querySelector('body')\n  );\n};\n\nexport default Error;\n","import { useState, useEffect } from 'react';\n\nexport default function useSuccess(isMounted) {\n  const [success, setSuccess] = useState(false);\n  useEffect(() => {\n    if (success)\n      setTimeout(() => {\n        if (isMounted.current) setSuccess(false);\n      }, 3500);\n  });\n\n  return {\n    success,\n    setSuccess,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport checkSVG from '../assets/svg/check-line.svg';\n\nimport '../styles/Success.css';\n\nconst Success = ({ text }) => {\n  return ReactDOM.createPortal(\n    <div id=\"success-popup\">\n      <div className=\"svg-wrapper\">\n        <img src={checkSVG} alt=\"success\" />\n      </div>\n      <div className=\"success-msg\">{text}</div>\n    </div>,\n    document.querySelector('body')\n  );\n};\n\nexport default Success;\n","export default __webpack_public_path__ + \"static/media/Waffle_Coffee_Dessert.2e7ce93e.png\";","import React from 'react';\nimport LoadingEllipsis from './LoadingEllipsis';\n\nimport '../styles/LoadingScreen.css';\n\nconst LoadingScreen = () => {\n  return (\n    <div className=\"loading-screen\">\n      <LoadingEllipsis />\n    </div>\n  );\n};\n\nexport default LoadingScreen;\n","import React from 'react';\n\nconst Input = ({ ...props }) => {\n  return <input {...props} />;\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from './Input.js';\n\nconst InputField = ({ label, error, ...inputProps }) => {\n  return (\n    <div className={error ? 'error input-wrapper' : 'input-wrapper'}>\n      {label && (\n        <label>\n          <span className=\"caps-title\">{label}</span>\n          {error && <span className=\"error-msg\"> - {error}</span>}\n        </label>\n      )}\n      <Input {...inputProps} />\n    </div>\n  );\n};\n\nexport default InputField;\n","import { useState, useEffect, useRef } from 'react';\n\nexport default function useMobileCheck() {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const isMobileCheck = useRef(window.innerWidth <= 768);\n\n  function handleWindowResize() {\n    setWindowWidth(window.innerWidth);\n    isMobileCheck.current = windowWidth <= 768;\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  });\n\n  return { isMobileCheck };\n}\n","import {\n  ref,\n  push,\n  set,\n  get,\n  update,\n  onValue,\n  off,\n  remove,\n  onDisconnect,\n} from 'firebase/database';\nimport { db } from '../firebaseStuff';\nimport getUnixTime from 'date-fns/getUnixTime';\n\nfunction detachListenersForRoom(roomID) {\n  const roomRef = ref(db, `Rooms/${roomID}`);\n\n  off(roomRef);\n}\n\nasync function getRoomStuff(roomID, setRoomName, setMsgList, finishLoading) {\n  const roomRef = ref(db, `Rooms/${roomID}`);\n\n  onValue(roomRef, async (snap) => {\n    const data = snap.val();\n\n    await setRoomName(data.name);\n\n    let messages = data.messages || {};\n    let msgList = [];\n    updateMsgList();\n    await setMsgList(changeReplyFromIDtoMsgObj(msgList));\n    finishLoading && finishLoading();\n    //helpers\n    function updateMsgList() {\n      for (const id in messages) {\n        messages[id].msgId = id; // set msgId\n        msgList.push(messages[id]);\n      }\n    }\n    function changeReplyFromIDtoMsgObj(arr) {\n      // if msg has replyTo, replace the msgId with actual msgObj\n      return arr.map((obj, i, thisArr) => {\n        if (!obj.replyTo) return obj;\n\n        obj.replyTo = thisArr.find((msgObj) => msgObj.msgId === obj.replyTo);\n        return obj;\n      });\n    }\n  });\n}\n\nasync function pushToMsgList(roomId, msgObj) {\n  const roomMsgList = ref(db, `Rooms/${roomId}/messages`);\n  const newMsgRef = push(roomMsgList);\n  set(newMsgRef, msgObj);\n\n  return newMsgRef.key;\n}\n\nexport { detachListenersForRoom, getRoomStuff, pushToMsgList };\n","export default __webpack_public_path__ + \"static/media/check-line.3f29db89.svg\";","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  generateRandomUser,\n  signIn,\n  subscribeToChannel,\n  updateMentions,\n} from '../../logic/user_firebaseStuff';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\nimport { getUnixTime } from 'date-fns';\n\nimport Form from '../Form';\nimport { pushToMsgList } from '../../logic/room_firebaseStuff';\n\nconst LoginEmail = ({ onRegister, onForgotPW, setUser, setLoading }) => {\n  const { inputValues, handleChange } = useInputValues();\n  const { setError } = useContext(ErrorContext);\n\n  const history = useHistory();\n\n  async function onCreateTestAcc() {\n    try {\n      setLoading(true);\n      const user = await generateRandomUser(setUser);\n      await Promise.all([\n        subscribeToChannel(user, '-MqVZFTJg485ZZ2TUtZ0'),\n        subscribeToChannel(user, '-MqVZFTPYJZ5kNMBKROY'),\n        subscribeToChannel(user, '-MqVZFTRVp_uIzlJVmOp'),\n        subscribeToChannel(user, '-MqVZFTShVKjPVWc-jyE'),\n        pushWelcomeMsg(),\n      ]);\n      setLoading(false);\n      //helper\n      async function pushWelcomeMsg() {\n        const msgID = await pushToMsgList('-MqVZG54pnPMmqDjLVRc', {\n          msg: 'Hello there! undefined',\n          user: '1',\n          timestamp: getUnixTime(new Date()),\n          mentions: [\n            {\n              uid: `${user.uid}`,\n              range: {\n                offset: 13,\n                length: 9,\n                key: 0,\n              },\n            },\n          ],\n        });\n        await updateMentions(\n          user.uid,\n          '-MqVZFTShVKjPVWc-jyE',\n          '-MqVZG54pnPMmqDjLVRc',\n          msgID\n        );\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  return (\n    <div className=\"login login-email\">\n      <header>\n        <h3>Welcome to bread!</h3>\n        <h4>a discord clone</h4>\n      </header>\n      <Form\n        fields={[\n          { label: 'Email', type: 'email', name: 'email' },\n          { label: 'Password', type: 'password', name: 'password' },\n        ]}\n        noCancelBtn={true}\n        textBtns={[\n          { text: 'Forgot your password?', onClick: onForgotPW },\n          { text: 'Need an account? Register', onClick: onRegister },\n          { text: 'Generate account to test', onClick: onCreateTestAcc },\n        ]}\n        handleChange={handleChange}\n        submitAction={() => signIn(inputValues.email, inputValues.password)}\n        setError={setError}\n        cleanUp={() => history.push('/')}\n        inputValues={inputValues}\n      />\n    </div>\n  );\n};\n\nexport default LoginEmail;\n","import React from 'react';\n\nimport Form from '../Form';\n\nconst LoginNewUser = ({\n  channel,\n  handleChange,\n  onContinue,\n  onReturningUser,\n  close,\n  inputValues,\n}) => {\n  return (\n    <div className=\"login new-user-username\">\n      {channel ? (\n        <header>\n          <h4>You are invited to join</h4>\n          <h2>{channel.name}</h2>\n        </header>\n      ) : (\n        <header>\n          <h3>Create an account</h3>\n        </header>\n      )}\n      <Form\n        fields={[{ type: 'text', name: 'username', label: 'username' }]}\n        actionBtnText=\"Continue\"\n        textBtns={[\n          { text: 'Already have an account?', onClick: onReturningUser },\n        ]}\n        handleChange={handleChange}\n        submitAction={onContinue}\n        cleanUp={() => 'do nothing'}\n        close={close}\n        inputValues={inputValues}\n      />\n    </div>\n  );\n};\n\nexport default LoginNewUser;\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\n\nimport { createUser } from '../../logic/user_firebaseStuff';\n\nimport Form from '../Form';\n\nconst CreateAcc = ({\n  newUserInfo,\n  handleChange,\n  channel,\n  setUser,\n  goBack,\n  inputValues,\n}) => {\n  const history = useHistory();\n  const { setError } = useContext(ErrorContext);\n\n  return (\n    <div className=\"login create-acc\">\n      <header>\n        <h3>Just one more step...</h3>\n      </header>\n      <Form\n        fields={[\n          { type: 'email', label: 'Email', name: 'email' },\n          { type: 'password', label: 'Password', name: 'password' },\n        ]}\n        actionBtnText={'Create Account'}\n        cancelBtnText={'Go Back'}\n        close={goBack}\n        handleChange={handleChange}\n        submitAction={() =>\n          createUser(\n            newUserInfo.email,\n            newUserInfo.password,\n            newUserInfo.username,\n            channel || null,\n            setUser\n          )\n        }\n        cleanUp={() => {\n          if (channel) history.push(`/channels/${channel}`);\n        }}\n        setError={setError}\n        inputValues={inputValues}\n      />\n    </div>\n  );\n};\n\nexport default CreateAcc;\n","import React, { useContext, useRef, useEffect, useState } from 'react';\nimport { ErrorContext } from '../../logic/contexts/ErrorContext';\nimport useSuccess from '../../logic/custom-hooks/useSuccess';\n\nimport { sendPWResetEmail } from '../../logic/user_firebaseStuff';\n\nimport Form from '../Form';\nimport Success from '../Success';\n\nconst ResetPassword = ({ close }) => {\n  const [email, setEmail] = useState();\n  const { setError } = useContext(ErrorContext);\n\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  });\n  const { success, setSuccess } = useSuccess();\n\n  return (\n    <>\n      {success && <Success text={'Password reset email sent'} />}\n      <div className=\"login reset-password\">\n        <header>\n          <h3>Reset your password</h3>\n        </header>\n        <Form\n          fields={[{ type: 'email', name: 'email', label: 'Email' }]}\n          actionBtnText=\"Send email\"\n          submitAction={() => sendPWResetEmail(email)}\n          setError={setError}\n          handleChange={(e) => setEmail(e.target.value)}\n          cleanUp={() => setSuccess(true)}\n          close={close}\n          inputValues={{ email }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ResetPassword;\n","import React, { useState } from 'react';\n\nimport useInputValues from '../../logic/custom-hooks/useInputValues';\n\nimport LoginEmail from './LoginEmail';\n\nimport LoginNewUser from './LoginNewUser';\nimport CreateAcc from './CreateAcc';\nimport { useParams } from 'react-router';\nimport ResetPassword from './ResetPassword';\n\nimport loginArtwork from '../../assets/png/Waffle_Coffee_Dessert.png';\n\nimport '../../styles/LoginScreen.css';\n\nconst LoginScreen = ({ setUser, isMobile, setLoading }) => {\n  const [node, setNode] = useState('returning user');\n  const { inputValues: newUserInfo, handleChange } = useInputValues();\n  const { channelID: channel } = useParams();\n\n  function goHome() {\n    setNode('returning user');\n  }\n  return (\n    <div className=\"login-screen\">\n      <div className=\"login-formWrapper\">\n        {\n          {\n            'returning user': (\n              <LoginEmail\n                onRegister={() => setNode('new user')}\n                onForgotPW={() => setNode('reset pw')}\n                setUser={setUser}\n                setLoading={setLoading}\n              />\n            ),\n            'new user': (\n              <LoginNewUser\n                channel={channel}\n                onContinue={() => setNode('create acc')}\n                onReturningUser={() => setNode('returning user')}\n                handleChange={handleChange}\n                close={goHome}\n                inputValues={newUserInfo}\n              />\n            ),\n            'create acc': (\n              <CreateAcc\n                newUserInfo={newUserInfo}\n                goBack={() => setNode('new user')}\n                handleChange={handleChange}\n                channel={channel}\n                setUser={setUser}\n                inputValues={newUserInfo}\n              />\n            ),\n            'reset pw': <ResetPassword close={goHome} />,\n          }[node]\n        }\n      </div>\n      {!isMobile && (\n        <div className=\"login-artwork-wrapper\">\n          <div className=\"artwork\">\n            <img src={loginArtwork} alt=\"illustration of bread and coffee\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LoginScreen;\n","import React, { useState, useCallback } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport useError from './logic/custom-hooks/useError';\nimport useLoginUser from './logic/custom-hooks/useLoginUser';\nimport { UserContext } from './logic/contexts/UserContext';\nimport { ErrorContext } from './logic/contexts/ErrorContext';\nimport useMobileCheck from './logic/custom-hooks/useMobileCheck';\nimport Import from './logic/Import';\n\nimport LoginScreen from './components/Login/LoginScreen';\nimport Error from './components/Error';\nimport LoadingScreen from './components/LoadingScreen';\n\nimport './globalStyles.css';\n\n//import icons\nimport './assets/font/flaticon.css';\nimport './assets/font/remixicon.css';\n\nfunction App() {\n  const { error, setError } = useError();\n  const [loading, setLoading] = useState(true);\n\n  const { user, mentioned, setUser, channelList } = useLoginUser(\n    setLoading,\n    setError\n  );\n  const {\n    isMobileCheck: { current: isMobile },\n  } = useMobileCheck();\n\n  const finishLoading = useCallback(() => {\n    setLoading(false);\n  }, []);\n\n  return (\n    <>\n      {error && <Error errorMsg={error} />}\n      {loading && <LoadingScreen />}\n      <ErrorContext.Provider value={{ setError }}>\n        <Route path={['/login/:channelID', '/login']}>\n          {!user && (\n            <LoginScreen\n              setUser={setUser}\n              isMobile={isMobile}\n              setLoading={setLoading}\n            />\n          )}\n        </Route>\n        {user && (\n          <>\n            <UserContext.Provider\n              value={{ user, setUser, channelList, mentioned }}\n            >\n              <div className=\"app\">\n                <Route path={'/explore'}>\n                  <Import\n                    mobile={() => import('./components/Explore/Explore_mobile')}\n                    desktop={() =>\n                      import('./components/Explore/Explore_desktop')\n                    }\n                    isMobile={isMobile}\n                  >\n                    {(Explore) => <Explore finishLoading={finishLoading} />}\n                  </Import>\n                </Route>\n                <Route\n                  path={[\n                    '/channels/:channelID/:roomID',\n                    '/channels/:channelID',\n                  ]}\n                >\n                  <Import\n                    mobile={() => import('./components/ChannelView_mobile')}\n                    desktop={() => import('./components/ChannelView_desktop')}\n                    isMobile={isMobile}\n                  >\n                    {(ChannelView) => (\n                      <ChannelView\n                        finishLoading={finishLoading}\n                        setError={setError}\n                      />\n                    )}\n                  </Import>\n                </Route>\n              </div>\n            </UserContext.Provider>\n          </>\n        )}\n      </ErrorContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useError() {\n  const [error, setError] = useState();\n\n  useEffect(function ifError() {\n    if (error)\n      setTimeout(() => {\n        setError();\n      }, 5000);\n  });\n\n  return { error, setError };\n}\n","import { useRef, useState, useEffect } from 'react';\nimport { updateUserOnline, getUserInfo } from '../user_firebaseStuff';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nexport default function useLoginUser(setLoading, setError) {\n  const [user, setUser] = useState();\n  const [channelList, setChannelList] = useState();\n  const [mentioned, setMentioned] = useState();\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const isMounted = useRef();\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  });\n\n  useEffect(\n    function getCurrentUser() {\n      const auth = getAuth();\n      onAuthStateChanged(auth, async (currUser) => {\n        if (!isMounted.current) return;\n        if (!currUser) {\n          //on logout stuff\n          setUser(currUser);\n          setChannelList();\n          setLoading(false);\n          history.replace('/login');\n          return;\n        }\n\n        if (currUser) {\n          try {\n            await getUserInfo(\n              currUser.uid,\n              setChannelList,\n              function getUserColor(val) {\n                currUser['color'] = val;\n              },\n              setMentioned\n            );\n            setUser(currUser);\n          } catch (error) {\n            setError(error.message);\n          }\n        }\n      });\n    },\n    [history, location.pathname, setLoading, setUser, setError]\n  );\n\n  useEffect(\n    function afterSetChannelList() {\n      if (!user || !channelList) return;\n      if (location.pathname === '/' || location.pathname === '/login')\n        if (channelList[0]) {\n          const defaultRoomID = Object.keys(channelList[0].defaultRoom)[0];\n          history.replace(`channels/${channelList[0].id}/${defaultRoomID}`);\n        } else {\n          history.replace('explore');\n        }\n\n      try {\n        updateUserOnline(user.uid, channelList);\n      } catch (error) {\n        setError(error.message);\n      }\n    },\n    [user, channelList, history, location.pathname, setError]\n  );\n\n  return { user, mentioned, setUser, channelList };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport { createSampleChannels } from './logic/channel_firebaseStuff';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}